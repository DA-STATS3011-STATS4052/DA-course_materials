[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 8: Collaborative Programming 2",
    "section": "",
    "text": "There are two main ways to download a project to your computer from GitHub and you should pick the one that makes sense for what you want to do:\n\nThe most straightforward method is to download a .zip file containing the latest version of the files.\n\nClick on the green ‘Code’ button, then the ‘Download ZIP’ option. This will download a single file, archived and compressed using the common ZIP file format. Double-clicking the file will extract its contents to a folder next to the original .zip file.\nAn important distinction here is that you are downloading just the codebase — the files and folders of the repository — and not the Git repository itself. This means you lose some of the key functionality of Git, for example, if the project maintainers make any updates to the project, you will need to manually re-download the .zip file and extract it again to see those changes, instead of being able to easily pull these changes (more on this in the next example!).\n\nAnother way to download a project to your computer is to use Git’s clone method. To use clone, we need to tell Git installed on our computer to make a copy (or ‘clone’) of another repository, in this case from GitHub.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nFirst, we need to copy the address of the repository we want to clone.\n\n\nClick on the green button labelled “Code”\nChoose either HTTPS or SSH, depending on how you connect to GitHub with Git on your computer (see the Configuration section of Unit 1)\nCopy the address\n\nThen in your terminal, navigate to your desired folder and issue the following command:\n\nCodegit clone &lt;address&gt;\n\n\nYou should now see the repository has been cloned to your computer.\n\n\nFirst, navigate to the repository you want to clone on the GitHub website.\n\n\nClick on the green button labelled ‘Code’\nClick on ‘Open with GitHub Desktop’\nYou should then see a window like this pop up in GitHub Desktop:\n\n\n\nThe URL of the repository on GitHub has automatically been populated\nChoose where you would like the repository to be cloned to on your computer\nClick ‘Clone’\n\n\n\n\nUsing this approach, we have a copy of the files and folders in the repository, but we have also copied the metadata which makes this into a Git repository. To answer the example above, now if a project maintainer makes an update to the project on GitHub, we can easily sync both versions:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nIn the project folder just issue the pull command:\n\nCodegit pull\n\n\n\n\nOn GitHub Desktop, click the ‘Fetch origin’ button in the top bar:"
  },
  {
    "objectID": "index.html#download-a-.zip-package",
    "href": "index.html#download-a-.zip-package",
    "title": "Week 8: Collaborative Programming 2",
    "section": "",
    "text": "The most straightforward method is to download a .zip file containing the latest version of the files.\n\nClick on the green ‘Code’ button, then the ‘Download ZIP’ option. This will download a single file, archived and compressed using the common ZIP file format. Double-clicking the file will extract its contents to a folder next to the original .zip file.\nAn important distinction here is that you are downloading just the codebase — the files and folders of the repository — and not the Git repository itself. This means you lose some of the key functionality of Git, for example, if the project maintainers make any updates to the project, you will need to manually re-download the .zip file and extract it again to see those changes, instead of being able to easily pull these changes (more on this in the next example!)."
  },
  {
    "objectID": "index.html#clone",
    "href": "index.html#clone",
    "title": "Week 8: Collaborative Programming 2",
    "section": "",
    "text": "Another way to download a project to your computer is to use Git’s clone method. To use clone, we need to tell Git installed on our computer to make a copy (or ‘clone’) of another repository, in this case from GitHub.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nFirst, we need to copy the address of the repository we want to clone.\n\n\nClick on the green button labelled “Code”\nChoose either HTTPS or SSH, depending on how you connect to GitHub with Git on your computer (see the Configuration section of Unit 1)\nCopy the address\n\nThen in your terminal, navigate to your desired folder and issue the following command:\n\nCodegit clone &lt;address&gt;\n\n\nYou should now see the repository has been cloned to your computer.\n\n\nFirst, navigate to the repository you want to clone on the GitHub website.\n\n\nClick on the green button labelled ‘Code’\nClick on ‘Open with GitHub Desktop’\nYou should then see a window like this pop up in GitHub Desktop:\n\n\n\nThe URL of the repository on GitHub has automatically been populated\nChoose where you would like the repository to be cloned to on your computer\nClick ‘Clone’\n\n\n\n\nUsing this approach, we have a copy of the files and folders in the repository, but we have also copied the metadata which makes this into a Git repository. To answer the example above, now if a project maintainer makes an update to the project on GitHub, we can easily sync both versions:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nIn the project folder just issue the pull command:\n\nCodegit pull\n\n\n\n\nOn GitHub Desktop, click the ‘Fetch origin’ button in the top bar:"
  },
  {
    "objectID": "index.html#create-a-new-local-git-repository",
    "href": "index.html#create-a-new-local-git-repository",
    "title": "Week 8: Collaborative Programming 2",
    "section": "\n2.1 Create a new local Git repository",
    "text": "2.1 Create a new local Git repository\nLet’s create a new folder on our computer called ‘tutorial3’ and initialise Git:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nCreate a directory for your ‘tutorial3’ work:\n\nCodemkdir tutorial3\ncd tutorial3\n\n\nand run git init inside:\n\nCodegit init\n\n\n\nInitialized empty Git repository in /Users/staff/Work/tutorial3/.git/\n\n\n\nChoose File &gt; New Repository... from the menu.\nIn the “Create a New Repository” form, name the repository “tutorial3”, set the “Local Path” field to your preferred location and click the “Create Repository” button:\n\n\n\n\nAdd the following file to the repository:\n\n\n\n\n\n\nexample.md\n\n\n\nHello\n\n\nThen add and commit the file:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit add example.md\ngit commit -m \"Add example.md\"\n\n\n\n\n\n\n\n\nNext, let’s create a branch named shout based on this commit.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nWe can create a new branch and switch to it using the switch command with the -c flag:\n\nCodegit switch -c shout\n\n\n\nSwitched to a new branch 'shout'\n\n\n\n\n\n\n\nAdd an exclamation mark to the end of the word within the example.md file:\n\n\n\n\n\n\nexample.md\n\n\n\nHello!\n\n\nThen commit the change:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit add example.md\n\n\n\ngit commit -m \"Add exclamation mark\"\n\n[shout eed4222] Add exclamation mark\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\nLet’s take a quick look at the log:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit log --all --decorate --oneline --graph\n\n\n\n* eed4222 (HEAD -&gt; shout) Add exclamation mark\n\n* 8f601cd (main) Add example.md\n\n\n\n\n\n\n\nNow let’s try merging the branch back into the main branch. First, switch back to main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit switch main\n\n\n\nSwitched to branch 'main'\n\n(Note, we don’t include the -c flag as this branch already exists)\n\n\n\n\n\n\nThen merge our shout branch into main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit merge shout\n\n\n\nUpdating 8f601cd..eed4222\n\nFast-forward\n\nexample.md | 2 +-\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\n\nWe can check that the version of our file in the main branch now has the exclamation mark:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodecat example.md\n\n\n\nHello!\n\n\n\n\n\n\n\nAs the change is now reflected in our main branch, we can safely delete our shout branch:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\nCodegit branch --delete shout\n\n\n\nDeleted branch shout (was eed4222).\n\n\n\nSimply right click on the shout branch here and select Delete"
  }
]