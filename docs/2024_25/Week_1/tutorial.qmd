---
title: "Extra material"
format:
  html:    
    code-link: true
    code-fold: true
    code-tools:
      source: false
      toggle: true
    toc: true
    toc-location: left
    toc-title: Contents
    number-sections: true
  pdf:
    latex-auto-install: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| message: false
#| warning: false
library(webexercises)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(fivethirtyeight)
```

# Working with dates and times

Working with date-time data in R can be challenging due to the unintuitive and inconsistent commands across different date-time objects. Additionally, managing things like time zones, leap days, and daylight saving time can be tricky since R doesn't always handle these well. The `lubridate` and `hms` packages (loaded as part of `tideverse`) simplify date-time operations in R, making it easier to perform common tasks and enabling functionalities that R's base capabilities do not support. Unfortunately, we don't have enough time to cover all the details in this session. Instead, we will only give short introduction on how to work and manipulate date and time variables in R using the `lubridate` and `hms` packages. But if you want to learn more please have a look at the [R for Data Science](https://r4ds.hadley.nz/datetimes) ebook.

First, what do we mean by Date/Time data? well, when we speak of Date/Time data we are mainly referring to three data types:

1.  **Date** - a variable containing only the date when an observation was made (e.g. 2024-07-12). More formally, it is a day stored as the number of days since 1970-01-01

2.  **Time** - a variable containing only the time when an observation was made (e.g. 18:15:00). Formally , the number of seconds since 00:00:00

3.  **Date & Time** - combination of both the date and time (e.g. 2024-07-12 18:15:00). Formally, is a point on the timeline, stored as the number of seconds since 1970-01-01 00:00:00 UTC

There are several ways in which Date-time variables can be created. Here are some examples:

```{r}
#| code-fold: false


# Example 1: string input with date Y/M/D format
ymd("2017-01-31")
# Example 2: string input with date M/D/Y format
mdy("January 31st, 2017")
# Example 3: string input with date D/M/Y format
dmy("31-Jan-2017")
# Example 4: numeric input with date M/D/Y format
mdy(07082016)
# Examples 5: string input with time H:M formate
hm("20:11")
# Example 6:  string input with date-time D/M/Y H:M:S
ymd_hms("2017-01-31 20:11:59")

```

In this session, instead of creating data-time variables by ourselves, we will focus on already existing Date/Time Data. Let's look at some of the date-time variables in the `flights` data set, namely the scheduled departure dates and times:

::: panel-tabset
# Output

```{r}
#| echo: false

flights_dep <- flights %>%
  select(year, month, day, hour, minute)
flights_dep

```

# R-Code

```{r}
#| eval: false
#| code-fold: false
flights_dep <- flights %>%
  select(year, month, day, hour, minute)
flights_dep
```
:::

Instead of having separate date-time variables spread across different columns, we can use the `make_date()` or `make_datetime()`functions to create new date and date-time variables respectively:

```{r}
#| code-fold: false

flights_dep <- flights_dep %>%
    mutate(departure_time = make_datetime(year, month, day, hour, minute),
           departure_date = make_date(year, month, day))
flights_dep
```

We then can visualize the distribution of the scheduled departure times across the year with ggplot by adding a `geom_freqpoly()` layer (which is similar to an histogram where the counts are displayed with lines instead of bars). Note that when you use date-times in a numeric context (like in a histogram), a binwidth of 1 is equivalent to 1 second, so a binwidth of 86400 is equivalent to one day.

```{r}
#| code-fold: show
#| fig-width: 4
#| fig-height: 3
#| fig-align: center

flights_dep %>%
  ggplot(aes(x = departure_time)) +
  geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
```

Likewise, if were interested in the distribution of the scheduled departures for a given day:

```{r}
#| code-fold: show
#| fig-width: 4
#| fig-height: 3
#| fig-align: center

flights_dep %>%
  filter(departure_date == ymd(20130102)) %>%
  ggplot(aes(x = departure_time)) +
  geom_freqpoly(binwidth = 600) # 600 s = 10 minutes
```

In here, `binwidth = 600` means we are clumping all flights within each 10 minutes (600 s) together into one single data point in our frequency polygon.

Now, notice that in the original `flights` data set, the hour and minute of the actual departure (`dep_time`) and arrival times (`arr_time`) are encoded together into a single integer. Let make a function that sets the actual times in a sensible format:

```{r}
#| code-fold: show
make_datetime_flights <- function(year, month, day, time) {
  hour <- case_when(
      nchar(time)== 1 ~ time  %/%1,
      nchar(time)== 2 ~ time  %/%10,
      .default =  time  %/%100
    )

  min <- case_when(
      nchar(time)== 1 ~ time  %%1,
      nchar(time)== 2 ~ time  %%10,
      .default =  time  %%100
    )
  make_datetime(year, month, day, hour, min)
}

```

The new `make_datetime_flights()` function we just created separates the hour and minute of a given HM input and pass it on to `make_datetime` function. This is achieved by using a vectorized `case_when` argument based on the number of characters in the integer that uses the `%/%` or`%%` operator to find (or discards accordingly) the remainder of an integer division to obtain the hour and minute components (e.g. `951 %/% 100` and `951 %% 100` splits the entry `951` into 9 and 51 (9:15 am once converted to time-date data) while `15 %/% 10` and `15 %% 10` and gives 1 and 5 (equivalent to 1:05 am in date-time format) .

```{r}
#| code-fold: show

flights_dt <- flights %>%
  filter(!is.na(dep_time), !is.na(arr_time)) %>%
  mutate(
    dep_time = make_datetime_flights(year, month, day, dep_time),
    arr_time = make_datetime_flights(year, month, day, arr_time),
    sched_dep_time = make_datetime_flights(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_flights(year, month, day, sched_arr_time)
  )

flights_dt %>%
  select(dep_time,arr_time,sched_dep_time,sched_arr_time) %>%
  slice(1:3)
```

## Extracting individual date-time components

The `lubridate` package also provide us with different tools for extracting specific components from date-time objects (e.g. year, month, hours, minutes, etc). Suppose we are interested in finding out which day of the week each flight took place. The `wday()` functions allow us to extract the numeric entry of the day of the week, by including the argument `label =TRUE`, we can also print the name of the weekday as the output

```{r}
#| code-fold: show

flights_dt %>%
   select(dep_time,arr_time,sched_dep_time,sched_arr_time) %>%
  mutate(weekday = wday(dep_time,label=TRUE)) %>%
  slice_sample(n=5)
```

Here are some more few examples of helper functions that allow you to extract individual date-time components:

```{r}
#| code-fold: show

datetime <- ymd_hms("2026-07-08 12:34:56")

year(datetime)
month(datetime,label = TRUE)
day(datetime)
hour(datetime)
minute(datetime)
```

::: {.callout-warning icon="false"}
## Task

Can you make a plot showing how does the distribution of flight times within a day change over the course of the year? i.e., how many flights have taken off by each hour. Comment on the patterns

`r hide("Take a hint")`

Within a day, we want to observe how the flight times differ. This means we should look at how flight times differ by the hour (i.e how many flights are taking off at every hour of the day). You can use the `hour()` function to extract the hours for every departure time and then count (using `summarize()`) how many flights have taken off by each hour. You can visualize the trend using `geom_line` in ggplot.

`r unhide()`

```{r}
#| code-fold: show
#| webex.hide: "Click here to see the solution"

flights_dt %>%
  mutate(hour = hour(dep_time)) %>%
  summarize(numflights_per_hour = n(),.by= hour)%>%
  ggplot(aes(x = hour, y = numflights_per_hour)) +
    geom_line() +
  labs(y="number of flights per hour",x = "hour")

```

We can see there is a peak of flights around 8am, a dip in flights from 10am-12pm, and then a drop off in number of flights past 7pm.
:::

::: {.callout-warning icon="false"}
## Task

Find out on what day of the week should you leave if you want to minimise the chance of a delay?

`r hide("Take a hint")`

To find the days of the week that have the lowest average delay, first you need to assign a day to each observation using `wday()`. You can then use `summarize()` and group by the the day of the week to find the average delay time for each day of the week.

`r unhide()`

```{r}
#| code-fold: show
#| webex.hide: "Click here to see the solution"

flights_dt %>%
  mutate(wday = wday(sched_dep_time, label = TRUE)) %>%
  group_by(wday) %>%
  summarize ( avg_dep_delay_week = mean(dep_delay, na.rm = TRUE),
              avg_arr_delay_week = mean(arr_delay, na.rm = TRUE)) %>%
  slice_min(avg_dep_delay_week,n=1)

# Saturday has the lowest average delay at 7.61, and on average the flights even arrive earlier than expected!
```

We can see there is a peak of flights around 8am, a dip in flights from 10am-12pm, and then a drop off in number of flights past 7pm.
:::

## Time intervals, durations and periods

Now that we have seen a few examples of R's date-time data structures, lets look into some of the time span classes.

-   Duration: exact number of seconds.
-   Periods: human units like weeks and months.
-   Intervals: a time span defined by a start and end point.

Duration is simply defined by the exact amount of time between two time events. It does not consider what these two events are in terms of,e.g. calendar years or time zone (so things like leap years would be ignored), and the output is shown in seconds. For example, say we want to manually compute the departure delays in the `flights` data set (we will use the `flights_dt` data frame we created previously which has the `dep_time` and `sched_dep_times` in the correct date-time format).

```{r}
#| code-fold: show

 flights_dt %>%
  mutate(
    dep_delay_manual =  dep_time - sched_dep_time) %>%
    select(dep_time,sched_dep_time,dep_delay_manual,dep_delay)  %>%
  slice(1:5)

```

At first glance, we can see that the manually computed departure delays `dep_delay_manual` and the original delays `dep_delay` are not on the same format. By default, when you subtract two dates (e.g. `dep_time - sched_dep_time`), you get a `difftime` object which records a time span of seconds, minutes, hours, days, or weeks. This variability can make `difftime` objects difficult to work with. To address this, we can use convert a `difftime` object to a `duration` class using the `as.duration()` function. Additionally, the original delays `dep_delay`, which are measured in minutes but have no default date-time format, can also be transformed into a duration class using the `duration(units ="")` function.

```{r}
#| code-fold: show

 flights_dt %>%
  mutate(
      dep_delay = duration(minute  = dep_delay),
      dep_delay_manual =  as.duration(dep_time - sched_dep_time))%>%
  select(dep_time,sched_dep_time,dep_delay_manual,dep_delay)  %>%
  slice(1:5)
```

`Durations` always record the time span in seconds. Instead, `periods` represent time spans without a fixed length in seconds; they work with "human" times, such as days and months. This allows them to operate in a more intuitive manner. periods can be created with different functions, here are some examples:

```{r}
#| code-fold: show

hours(c(12, 24))
days(7)
months(1:3)
```

Lets see how the output changes when we use `periods` instead of `durations`:

```{r}
#| code-fold: show

flights_dt %>%
  mutate(
      dep_delay = period(minute  = dep_delay),
      dep_delay_manual =  as.period(dep_time - sched_dep_time))%>%
  select(dep_time,sched_dep_time,dep_delay_manual,dep_delay)  %>%
  slice(1:5)

```

The last type of time-span defined in `lubridate` are *intervals*. As with *durations*, intervals are expressed in physical time spans defined by a start and end points that are real date-times, i.e. intervals are *durations* defined by a calendar time. Lets suppose we are only given the scheduled departure times and the departure delay. We can create an interval time-span to compute the actual departure time as follows:

```{r}
#| code-fold: show

flights_dt %>%
  select(sched_dep_time,dep_delay) %>%
  mutate(
      dep_delay_duration = duration(minute  = dep_delay),
      dep_delay_interval= as.interval(x = dep_delay_duration, start= sched_dep_time))%>%
  slice(1:5)
```
