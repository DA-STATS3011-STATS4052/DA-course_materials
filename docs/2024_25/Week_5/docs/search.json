[
  {
    "objectID": "notes_24_25.html",
    "href": "notes_24_25.html",
    "title": "Week 6: Introduction to Quarto",
    "section": "",
    "text": "This week we will take what we have learned in previous weeks and produce a report using Quarto . Quarto is a multi-language system that allows reports and presentation to be created within R, thus allowing for R code and output to be easily embedded within a report, a presentation or even a Blog! Hence, all of the R code and plots obtained from an analysis are contained within a single file.\nYou can find below an example of a report produced with Quarto relating to fitting a regression model using one numerical and one categorical explanatory variables. You can toggle the &lt;/&gt; Code button in the html file to see the source code that produced this file. It is advised to have this document open while working through the remaining sections in order to see examples put into practice.\n\n\n\n Download Example report\n\n\n\nThe following sections will take you through the different steps required to produce this report in Quarto. For creating a new Quarto file from scratch see Section 2, otherwise move onto Section 3."
  },
  {
    "objectID": "notes_24_25.html#code-chunks",
    "href": "notes_24_25.html#code-chunks",
    "title": "Week 6: Introduction to Quarto",
    "section": "\n6.1 Code chunks",
    "text": "6.1 Code chunks\nCode chunks allow for R code to be embedded within a document. Not only can the code be easily included within a document, the code can also be evaluated. Hence, you can produce an entire report based on an analysis that is contained within a single file instead of having separate files containing your R code, plot images and comments.\nR Code can be evaluated directly on the Quarto document or in the R console (the latter would be similar to run your code from an R script). To select where you want your code to be evaluated click on the setting options  (next to the Render button  ) and choose between Chunk Output Inline (default) if you want your code to be evaluated within the Quarto document or Chunk Output in Console to evaluate your code directly on the R console. If you select the latter, the following options will be added to the document preamble:\neditor_options: \n  chunk_output_type: inline\nTo add an R Code Chunk you can simply click on the  symbol (or using keyboard shortcut cmd+alt+i or ctrl+alt+i for windows users) on either visual or source modes.\nR code chunks are identified with {r} with multiple (optional) chunk options which we can access by typing #| at the beginning of the line.\n\n\nvisual mode view\nsource mode view\n\n\n\nIf you are on visual mode the R chunks will appear as follow:\n\n\n\n\n\n\nIf you are in the source mode the R chunks will appear as follow:\n```{r}\n#| \n\n```\n\n\n\nSome of the most common arguments you will use in your R Chunks are:\n\n\necho: include the R code within the code chunk in the document (true/false);\n\neval: evaluate the R code within the code chunk (true/false);\n\nwarning: suppress warnings from R (true/false); and\n\nmessage: suppress messages from R (true/false).\n\nFor example, let’s say we wanted to select the score and bty_avg variables from the evals data set to be used later, we can do that using the following code chunk:\n{r}\n#| echo: false\nlibrary(tidyverse)\nlibrary(moderndive)\nevals.scores &lt;- evals |&gt;\n  select(score, bty_avg)\nSetting echo: false will tell the R to evaluate the code while hiding the R chunk source code from the main document. In this example, we will store the subsetted data set as the object evals.scores so that it can be used in chunks downstream. If you want to embed the source code within the Quarto document then you would simply set echo: true.\n\n\n\n\n\n\nImportant\n\n\n\nR chunk options are case sensitive! so echo: TRUE or echo: FALSE won’t work! You can use R Studio autocomplete feature the see the available options by pressing the tab key.\n\n\nNote that by default, and unless otherwise specified, chunk codes in Quarto will be set to echo: true. Alternatively, you can edit the Quarto YAML preamble and change the global output options to show or hide all R chunks. You can do this within the execute options as follows (you can manually override this by changing the echo option in each individual chunk) :\n---\ntitle: \"Data Analysis: Example Report\"\nnumber-sections: true\nexecute:\n  echo: false\n---\n\n\n\n\n\n\nImportant\n\n\n\nYou need to be very careful with the indentation if you decide to change the global settings of Quarto preamble!\n\n\nLets look at another example:\n#| message: false\n#| warning: false\nlibrary(gapminder)\nlibrary(skimr)\nlibrary(ggplot2)\nIn this case, we set warning and message to false to indicate that we want to suppress any warnings or messages (e.g., the ones that you usually get when loading R packages). Another useful option is eval. If we set eval: false then we indicate that we don’t want the chunk output to be included in the rendered document (this is useful for example if we just want to show our R code without rendering its output). For example the following chunk will only show the code for creating ggplot object without actually evaluating it:\n#| eval: false\nggplot(data=evals.scores,aes(y=score,x=bty_avg)) +\n  geom_point()\n\n\n\n\n\n\nNote\n\n\n\nNote that we can still run the code in each individual chunk (even if we set eval: false) by clicking the run chunk bottom. The code will be evaluated in either your .qmd file or in the console depending on the Chunk output settings (this mean that you can test your code in R but its output won’t be rendered in the final document).\n\n\nAdditional arguments can be passed to code chunks other than those displayed above. The most useful ones other than those relate to figure sizing and positioning and are discussed in the upcoming sections.\n\n\n\n\n\n\nTask\n\n\n\nAdd a new chunk at the beginning of your document that loads the following R packages:\n\nlibrary(ggplot2) \nlibrary(tidyverse)\nlibrary(gt) \nlibrary(MASS) \nlibrary(patchwork) \nlibrary(moderndive) \n\nMake sure that the source code and messages/warnings outputs from loading these libraries are hidden from your rendered document. Then, add another chunk beneath the exploratory analysis section where you create a subset of the iris data set containing the variables Sepal.Width, Sepal.Length and Species. Make sure that the source code for this chunk is also hidden in the final document.\nThen, click the Render button and compile your Quarto document to make sure that your markdown formatting produces the expected output in your HTML document.\n\n\nSee solution\n\nThe two chunks you have created should look as follows:\n#| echo: false\n#| warning: false \n#| message: false \n\nlibrary(ggplot2) \nlibrary(tidyverse) \nlibrary(gt) \nlibrary(MASS) l\nlibrary(patchwork) \nlibrary(moderndive)\n#| echo: false\n Irs &lt;- iris %&gt;%\n   dplyr::select(Sepal.Width, Sepal.Length, Species)"
  },
  {
    "objectID": "notes_24_25.html#inline-code",
    "href": "notes_24_25.html#inline-code",
    "title": "Week 6: Introduction to Quarto",
    "section": "\n6.2 Inline code",
    "text": "6.2 Inline code\nR code can be included within text by enclosing the code with `r `. This allows for expressions to be evaluated by R and not be hardwired by the user. For example, if you wanted to convey the number of observations within evals.scores then we can enclose nrow(evals.scores) within `r ` to obtain the number of observations, rather than hardwiring 463 into the text. This can help to prevent potential human error when presenting information. It can also help with consistency and ease-of-use, since n = nrow(evals.scores) could be stored as an R object and referred to whenever necessary within the text using inline R code."
  },
  {
    "objectID": "notes_24_25.html#tables-by-hand",
    "href": "notes_24_25.html#tables-by-hand",
    "title": "Week 6: Introduction to Quarto",
    "section": "\n7.1 Tables ‘by hand’",
    "text": "7.1 Tables ‘by hand’\nTables can also be produced ‘by hand’ in Quarto. Here is an example of how we can recreate the table above corresponding to the first 5 rows of the iris data.\n\n\nvisual mode view\nsource mode view\n\n\n\nOn visual mode, this table can be created by clicking on the Table option in the toolbar (next to Insert▾ while using the visual mode) and selecting the number of rows and columns. Here you can also add a caption to the table.\n\n\n\n\nWe can manually fill each entry to produce the following table:\n\nThe fist 5 rows of the iris data.\n\nSepal Length\nSepal Width\nPetal Length\nPetal Width\nSpecies\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\nOn source mode, the raw markdown code that produces this table is the following:\n| Sepal Length | Sepal Width | Petal Length | Petal Width | Species |\n|:------------:|:-----------:|:------------:|:-----------:|--------:|\n|     5.1      |     3.5     |     1.4      |     0.2     |  setosa |\n|     4.9      |     3.0     |     1.4      |     0.2     |  setosa |\n|     4.7      |     3.2     |     1.3      |     0.2     |  setosa |\n|     4.6      |     3.1     |     1.5      |     0.2     |  setosa |\n|     5.0      |     3.6     |     1.4      |     0.2     |  setosa |\n: The fist 5 rows of the iris data. {#tbl-iris}\nIn here, the vertical separators | are used between columns, while --- is placed below table/column headings. Alignment of the columns is done using colons, that is, for left alignment put :---, for right alignment put ---:, and for centred alignment put :---:. For these sorts of tables, you can add a caption below the table and then include a #tbl- label in braces at the end of the caption for cross-referencing.\n\n\n\nFor example, the table above corresponding to the first 5 rows of the iris data can be produced by hand by clicking on the Table option in the toolbar (next to Insert▾ while using the visual mode) and selecting the number of rows and columns.\n\n\n\n\n\n\nNote\n\n\n\nYou can read more about authoring Quarto tables here.\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can use the kable() function from the kableExtra library to output a markdown formatted table using as input a data frame or matrix. Then you can copy-paste this in your quarto document. For example try the following code and paste its output yo your quarto document:\n\nlibrary(kableExtra)\niris %&gt;%\n  slice_head(n=5)  %&gt;% kable(digits = 2)\n\nOf course, you can use the kable function instead of gt within a chunk. The html output will be rendered the same way in Quarto. kable might be more straightforward and easier to implement while gt will give you more control and customization over the layout of your tables. Ultimately, it’s a matter of personal preference and which one you feel more comfortable using."
  },
  {
    "objectID": "notes_24_25.html#summary-of-regression-models-as-html-tables",
    "href": "notes_24_25.html#summary-of-regression-models-as-html-tables",
    "title": "Week 6: Introduction to Quarto",
    "section": "\n7.2 Summary of Regression Models as HTML Tables\n",
    "text": "7.2 Summary of Regression Models as HTML Tables\n\nIn this section we briefly introduce the package sjPlot to create HTML-tables that will be displayed nicely in your Quarto document. We will focus on the tab_model() function, which receives as argument a single or multiple models fitted with the lm or glm engine (other models, like hurdle- or zero-inflated models, also work with this function).\n\n\n\n\n\n\nImportant\n\n\n\nHTML is the only output-format, you can't (directly) create a LaTex or PDF output from tab_model() and related table-functions. \n\n\nFor example, say we want to create a nice html table of a linear model fitted to the evals data set:\n\nlibrary(sjPlot)\nmodel_evals &lt;- lm(score~bty_avg,evals.scores)\n\nThen we can simply add the following chunk to display the Table 2 below:\n#| tbl-cap: \"Summaries of the linear model fitted to the evaluation scores data set.\n#| label: tbl-lm_eval_scores\ntab_model(model_evals)\n\n\n\nTable 2: Summaries of the linear model fitted to the evaluation scores data set.\n\n\n\n\n\n \nscore\n\n\nPredictors\nEstimates\nCI\np\n\n\n(Intercept)\n3.88\n3.73 – 4.03\n&lt;0.001\n\n\nbty avg\n0.07\n0.03 – 0.10\n&lt;0.001\n\n\nObservations\n463\n\n\nR2 / R2 adjusted\n0.035 / 0.033\n\n\n\n\n\n\n\n\ntab_model() has some argument that allow to show or hide specific columns from the output:\n\nshow.ci to show/hide the column with confidence intervals.\nshow.se to show/hide the column with standard errors.\nshow.p to show/hide the column with p-values.\nshow.r2 to show/hide \\(R^2\\) values.\nshow.obs to show/hide the number of observation.\n\nOther useful arguments are collapse.ci and collapse.se which collapse the columns for confidence intervals and standard errors one column together with the estimates. You can use the pred.labels argument to change the names of the coefficients in the Predictors column (note that the length of pred.labels must exactly match the amount of predictors in the Predictor column). Finally, you ca use the dv.labels to change the names of the model columns, which are labelled with the variable labels / names from the dependent variables. Will we check an example in an upcoming task.\n\n\n\n\n\n\nNote\n\n\n\nYou can read more about sjPlot html regression model tables here."
  },
  {
    "objectID": "notes_24_25.html#embedding-external-images",
    "href": "notes_24_25.html#embedding-external-images",
    "title": "Week 6: Introduction to Quarto",
    "section": "\n8.1 Embedding external images",
    "text": "8.1 Embedding external images\nIncluding plots and figures within a Quarto document is straightforward. To include an external figure you can use the visual mode tool bar and click on Insert▾➠ Figure/Image... and then browse to the path where you image is, or alternatively write the url from which the image should be obtained. The pop-up windows allows you also to write a caption and also to modify the image alignment with respect the main text.\n\n\n\n\nIf you want to add cross-referencing you can add the fig- prefix in the attributes tab of the pop-up windows:\n\n\n\n\nThe source code would then look something like:\n![](images/myimage.png){#fig-image1}"
  },
  {
    "objectID": "notes_24_25.html#embedding-r-generated-figures",
    "href": "notes_24_25.html#embedding-r-generated-figures",
    "title": "Week 6: Introduction to Quarto",
    "section": "\n8.2 Embedding R generated figures",
    "text": "8.2 Embedding R generated figures\nVery often we would like to use the R plots generated from your analysis instead of using external figures. To achieve this, the R code for the plot is simply included within a code chunk including additional arguments for plot size and positioning. For example, to include the scatterplot of teaching and beauty:\n\n\nR ggplot\nR chunk code\n\n\n\n\n\n\n\n\n\n\nFigure 1: Relationship between teaching and beauty scores. The best-fitting line has been superimposed.\n\n\n\n\n\n\n#| label: fig-scatterplot1\n#| fig-cap: Relationship between teaching and beauty scores. The best-fitting line has been superimposed.\n#| fig-width: 4\n#| fig-height: 3\n#| fig-align: center\n#| message: false\n\nggplot(evals.scores, aes(x = bty_avg, y = score)) +\n  geom_point() +\n  labs(x = \"Beauty Score\", y = \"Teaching Score\") +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\nHere, we set the chunk label to include the fig- prefix so we can cross-reference using the @ prefix. For example @fig-scatterplot1 will create a hyperlink to Figure 1. Then we added a figure caption using the fig-cap option. For size and positioning of the figure we can include:\n\n\nfig.width: an integer value denoting the width of the figure;\n\nfig.height: an integer value denoting the height of the figure;\n\nfig.align: the alignment of the figure within the body of the document\n\n\n\n\n\n\n\n Question\n\n\n\nWhat other argument would you need to include if you wish to show the chunk plot output only?\n\neval: false\necho: true\necho: false\neval: true\n\n\n\n\n\n\n\n\nTask\n\n\n\nCreate a new chunk in your exploratory analysis section that displays a scatter plot showing the relationship between sepal width and length by species. Re-size and align the plot accordingly, add a caption and a cross-reference label. Finally write some comments in the main body while cross-referencing the plot you created.\n\n\nsee solution\n\nYour new chunk should look something like this:\n#| echo: false\n#| fig-cap: Relationship between sepal width and sepal length by species.\n#| label: fig-scatter\n#| fig-align: center\n#| fig-width: 4.5\n#| fig-height: 3.5\n\nggplot(Irs, aes(x = Sepal.Length,\n                y = Sepal.Width,\n                color = Species)) +\n  geom_point() +\n  labs(x = \"Sepal length (in centimetres)\", \n       y = \"Sepal width (in centimetres)\",\n       color = \"Species\") \nThen, @fig-scatter should be used in the text description to refer to this plot.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can read more about authoring Quarto figures here."
  }
]