---
title: "Week 6: Introduction to Quarto "
toc: true
toc-location: left
toc-title: Contents
number-sections: true
format:
  html:    
    code-link: true
    code-fold: true
    code-tools:
      source: false
      toggle: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| message: false
#| warning: false
#| 
library(ggplot2)
library(tidyverse)
library(moderndive)
library(webexercises)
library(mvtnorm)
library(gridExtra)
library(downloadthis)
evals.scores <- evals |>
  select(score, bty_avg)

```

# Introduction

This week we will take what we have learned in previous weeks and produce a report using Quarto . Quarto is a multi-language system that allows reports and presentation to be created within R, thus allowing for R code and output to be easily embedded within a report, a presentation or even a Blog! Hence, all of the R code and plots obtained from an analysis are contained within a single file.

You can find below an example of a report produced with Quarto relating to fitting a regression model using one numerical and one categorical explanatory variables. You can toggle the `</> Code` button in the html file to see the source code that produced this file. It is advised to have this document open while working through the remaining sections in order to see examples put into practice.

```{r}
#| echo: false
#| eval: true
#| column: body

download_link(
  link = "https://moodle.gla.ac.uk/pluginfile.php/8299098/mod_resource/content/4/Example_report.html",
  button_label = "Download Example report",
  button_type = "primary",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = TRUE
)
```

The following sections will take you through the different steps required to produce this report in Quarto. For creating a new Quarto file from scratch see @sec-quarto_init, otherwise move onto @sec-title.

# Creating your first Quarto document {#sec-quarto_init}

If you want to create a new R Markdown document from scratch within RStudio you can click on on the `New File` icon ![](images/new_doc.png){width="23"} or go to:

`File -> New File -> Quarto  Document...`

This will open the following window within RStudio:

![](images/quarto1.png){fig-align="center" width="500"}

::: callout-important
Before creating your first Quarto document, be sure that you have the latest RStudio [version](https://posit.co/download/rstudio-desktop/) installed.
:::

From here, select **Document** and the **Default Output Format** as **HTML** (**PDF** output is also possible but you need the latest version of `MikTex` to be installed if you are a Windows user). Give your document a title and select OK. This will open in RStudio an empty `.qmd` file.

::: callout-note
You can download this [template](https://quarto.org/docs/get-started/hello/rstudio/_hello.qmd) containing simple instructions on how to do some basic stuff using Quarto . To see what the HTML/PDF of the template document looks like click on the ![](images/rstudio-render-button.png){width="16" height="13"} `Render` button at the top of the document window.
:::

# Title {#sec-title}

The title of the document can be found at the top of the `.qmd` file within its **preamble** (YAML heading), which is shown below. When titling your document, ensure the title is within inverted commas.

``` r
---
title: "Data Analysis: Example Report"
---
```

A Quarto document can be edited in the two modes of the RStudio editor: visual (on the left) and source (on the right). The visual mode offers a more friendly interface for editing you document (it includes a toolbar for quick edit options), while the source mode allows you to see and edit the underlying markdown text code.

![](images/quarto2.png){fig-align="center" width="763"}

You can switch between these two modes at anytime. We will now cover different aspects of building a Quarto document and provide the instructions on how to do this using either the visual editor or the source mode.

# Sections {#sec-sections}

The structure of you quarto document can be determine by the different sections contained in it.

Under the `source` mode, sections within a Quarto document are created using `#`. For example, `# Introduction` will create a section titled **Introduction**. Alternatively, if you use the `visual` mode, you can include a new section by selecting a proper heading under the block-format display of the toolbar as follows:

![](images/quarto3.png){fig-align="center" width="734"}

If you want section to be numbered you can set `number_sections: true` within the preamble of the document:

``` r
---
title: "Data Analysis: Example Report"
number-sections: true
---
```

::: {.callout-warning icon="false"}
## Task

Create a new quarto document by clicking on the `New File` icon ![](images/new_doc.png){width="23"} , chage the title to *"Data Analysis: Example Report"* and add numbered-level 1 headings for each of the following project sections:

-   Introduction

-   Exploratory data analysis

-   Formal data analysis

-   Conclusions

-   References

Then, click the ![](images/rstudio-render-button.png){width="24" height="20"}`Render` button and compile your Quarto document to make sure that your markdown formatting produces the expected output in your HTML document.

Tip: Try typing `/` symbol on your main document while using the visual mode and then use the drop menu to add a new section to your document (you can type the letter `h` to search for the different header types while the drop menu is being displayed).

`r hide("See solution")`

Your quarto document should look like this if you go to the `source mode`:

``` r
---
title: "Data Analysis: Example Report"
number-sections: true
---

# Introduction

# Exploratory data analysis

# Formal data analysis

# Conclusions

# References
```

`r unhide()`
:::

Each section can be assigned labels so that they can be referred to within the text.

::: panel-tabset
# `visual` mode

For the `visual` model you can click on the edit attributes settings ![](images/threedots.png){width="17"} (right hand side of the section heading) and write the label you want on the ID box of the pop-up window:

![](images/quarto4.png){fig-align="center" width="518"}

# `source` mode

To reference a section, add a `#sec-` identifier to any heading. For example, to give our **Introduction** section a label we simply add the label `{#sec-intro}` to the section title as follows:

``` r
# Introduction {#sec-intro}
```

where `sec-intro` is the label chosen for this particular section.
:::

::: callout-important
It is a good idea to label your sections appropriately so that it is easy to refer to them later. Note that it is important to add the `sec-` prefix in order for cross-referencing to work properly.
:::

The section can now be referred to within the text of the document using the `@`sec- command. That is

``` r
@sec-intro ...
```

will produce

``` r
Section 1 ...
```

where the 1 is a clickable hyperlink that will take you to the beginning of that section within the document. If you are using the `visual` mode, you can also easily include cross-references by typing `@` and then scroll through the different hyperlinks you created, or by clicking on `Insert▾➠ Cross Reference`

Note that for section labels to appear on the references list, you must save your document first (click on `File ➠ Save as…` and save your document with a proper name). Then all the labels (i.e., labels of sections, figures, equations, etc.) will appear on the Insert Cross Reference pop up window. Then simply click on `Insert▾` to add the selected reference to your document:

![](images/quarto5.png){fig-align="center" width="528"}

::: callout-note
Subsections can be added to a document in a similar fashion using either `##` (such that `## Subsection {#sec-sub}` will create a subsection with the label `sec-sub` and title **Subsection**) or by clicking on the `Block format ➠ Header X` menu on the toolbar on the `visual` mode.
:::

::: {.callout-warning icon="false"}
## Task

Add the following level 2 headings (subsections) underneath the `Formal data analysis` heading:

-   Statistical model

-   Results

-   Model diagnostics

Then, add appropriate labels for each section. Render ![](images/rstudio-render-button.png){width="21" height="17"} your Quarto document and check the HTML output.

`r hide("see solution")`

Your quarto document should look like this if you go to the `source mode:`

``` {.latex .code-overflow-wrap}
---
title: "Data Analysis: Example Report"
number-sections: true
---

# Introduction {#sec-intro}

# Exploratory data analysis {#sec-eda}

## Statistical model {#sec-stats}

## Results {#sec-results}

## Model diagnostics {#sec-diagnostics}

# Formal data analysis {#sec-fda}

# Conclusions {#sec-con}

# References
```

`r unhide()`
:::

# Adding references

References can be included by clicking on `Insert▾➠ @Citation`. This will pop-up a new window where you can look up for a reference, add the citation for an R package that is installed in your local computer or add a citation based on the DOI code of a paper or book:

![](images/referencing.png){fig-align="center" width="495"}

The reference you add will be saved to a `*.bib` that you can access at the location where your `.qmd` file is stored. Once a reference is added to your document, the YAML heading will display the option `bibliography: references.bib` which is the source file where your references are being managed.

::: {.callout-warning icon="false"}
## Task

Copy and paste the following text under the `Introduction` section:

``` {.latex .code-overflow-wrap}
There are hundreds of species of flowering plants, with one such genus known as the iris. Edgar Anderson procured measurements (in centimetres) from 150 different flowers from three different iris species [CITE]. The measurements are on the petal length and width, and sepal length and width from each flower. The three different iris species are the setosa, versicolor, and virginica. Here, we shall analyse the relationship between sepal width and sepal length and see whether the relationship, if any, is different across the three species of iris.

Section 2 consists of an exploratory analysis of the iris data and explores the potential relationship between sepal width and length, and whether there are any differences between the three species of the iris genus. Section 3 contains the results from fitting a multiple regression model to the data, as well as the assessment of the model assumptions. Concluding remarks are given in Section 4 .
```

Then, change the species names (setosa, versicolor, and virginica) to *italics* format and add a citation `[CITE]` for the iris data set using the following doi: `10.24432/C56C76` .

Lastly, change the text referring to to Section 2, 3 and 4 with clickable hyperlinks to each of these sections. Render ![](images/rstudio-render-button.png){width="21" height="17"} your Quarto document and check the HTML output.

`r hide("see solution")`

The introduction section of your quarto document should look like this if you go to the `source mode:`

``` {.latex .code-overflow-wrap}
---
title: "Data Analysis: Example Report"
number-sections: true
---

# Introduction {#sec-intro}

There are hundreds of species of flowering plants, with one such genus known as the iris. Edgar Anderson procured measurements (in centimetres) from 150 different flowers from three different iris species [@r.a.fisher1936] . The measurements are on the petal length and width, and sepal length and width from each flower. The three different iris species are the *setosa*, *versicolor*, and *virginica*. Here, we shall analyse the relationship between sepal width and sepal length and see whether the relationship, if any, is different across the three species of iris.

@sec-eda consists of an exploratory analysis of the iris data and explores the potential relationship between sepal width and length, and whether there are any differences between the three species of the iris genus. @sec-fda contains the results from fitting a multiple regression model to the data, as well as the assessment of the model assumptions. Concluding remarks are given in @sec-con .

```

`r unhide()`
:::

# Embedding R code

## Code chunks

Code chunks allow for R code to be embedded within a document. Not only can the code be easily included within a document, the code can also be evaluated. Hence, you can produce an entire report based on an analysis that is contained within a single file instead of having separate files containing your R code, plot images and comments.

R Code can be evaluated directly on the Quarto document or in the R console (the latter would be similar to run your code from an R script). To select where you want your code to be evaluated click on the setting options ![](images/settings.png){width="19"} (next to the Render button ![](images/rstudio-render-button.png){width="22"} ) and choose between `Chunk Output Inline` (default) if you want your code to be evaluated within the Quarto document or `Chunk Output in Console` to evaluate your code directly on the R console. If you select the latter, the following options will be added to the document preamble:

``` r
editor_options: 
  chunk_output_type: inline
```

To add an R Code Chunk you can simply click on the ![](images/chunk.png){width="29"} symbol (or using keyboard shortcut `cmd+alt+i` or `ctrl+alt+i` for windows users) on either `visual` or `source` modes.

R code chunks are identified with `{r}` with multiple (optional) chunk options which we can access by typing `#|` at the beginning of the line.

::: panel-tabset
# `visual` mode view

If you are on visual mode the R chunks will appear as follow:

![](images/quarto6.png){fig-align="center" width="485"}

# `source` mode view

If you are in the source mode the R chunks will appear as follow:

```{{r}}
#| 

```
:::

Some of the most common arguments you will use in your R Chunks are:

-   **echo**: include the R code within the code chunk in the document (true/false);
-   **eval**: evaluate the R code within the code chunk (true/false);
-   **warning**: suppress warnings from R (true/false); and
-   **message**: suppress messages from R (true/false).

For example, let's say we wanted to select the `score` and `bty_avg` variables from the `evals` data set to be used later, we can do that using the following code chunk:

```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(moderndive)
library(gapminder)
library(skimr)
library(ggplot2)
evals.scores <- evals %>%
  select(score, bty_avg)
```

``` r
{r}
#| echo: false
library(tidyverse)
library(moderndive)
evals.scores <- evals |>
  select(score, bty_avg)
```

Setting `echo: false` will tell the R to evaluate the code while hiding the R chunk source code from the main document. In this example, we will store the subsetted data set as the object `evals.scores` so that it can be used in chunks downstream. If you want to embed the source code within the Quarto document then you would simply set `echo: true`.

::: callout-important
R chunk options are case sensitive! so `echo: TRUE` or `echo: FALSE` won't work! You can use R Studio autocomplete feature the see the available options by pressing the tab key.
:::

Note that by default, and unless otherwise specified, chunk codes in Quarto will be set to `echo: true`. Alternatively, you can edit the Quarto YAML preamble and change the global output options to show or hide all R chunks. You can do this within the `execute` options as follows (you can manually override this by changing the `echo` option in each individual chunk) :

``` r
---
title: "Data Analysis: Example Report"
number-sections: true
execute:
  echo: false
---
```

::: callout-important
You need to be very careful with the indentation if you decide to change the global settings of Quarto preamble!
:::

Lets look at another example:

``` r
#| message: false
#| warning: false
library(gapminder)
library(skimr)
library(ggplot2)
```

In this case, we set `warning` and `message` to `false` to indicate that we want to suppress any warnings or messages (e.g., the ones that you usually get when loading R packages). Another useful option is `eval.` If we set `eval: false` then we indicate that we don't want the chunk output to be included in the rendered document (this is useful for example if we just want to show our R code without rendering its output). For example the following chunk will only show the code for creating `ggplot` object without actually evaluating it:

``` r
#| eval: false
ggplot(data=evals.scores,aes(y=score,x=bty_avg)) +
  geom_point()
```

::: callout-note
Note that we can still run the code in each individual chunk (even if we set `eval: false`) by clicking the run chunk bottom![](images/run_chunk.png){width="28" height="18"}. The code will be evaluated in either your `.qmd` file or in the console depending on the Chunk output settings (this mean that you can test your code in R but its output won't be rendered in the final document).
:::

Additional arguments can be passed to code chunks other than those displayed above. The most useful ones other than those relate to figure sizing and positioning and are discussed in the upcoming sections.

::: {.callout-warning icon="false"}
## Task

Add a new chunk at the beginning of your document that loads the following R packages:

```{r}
#| eval: false
#| code-fold: false 
library(ggplot2) 
library(tidyverse)
library(gt) 
library(MASS) 
library(patchwork) 
library(moderndive) 
```

Make sure that the source code and messages/warnings outputs from loading these libraries are hidden from your rendered document. Then, add another chunk beneath the exploratory analysis section where you create a subset of the `iris` data set containing the variables `Sepal.Width`, `Sepal.Length` and `Species`. Make sure that the source code for this chunk is also hidden in the final document.

Then, click the ![](images/rstudio-render-button.png){width="24" height="20"}`Render` button and compile your Quarto document to make sure that your markdown formatting produces the expected output in your HTML document.

`r hide("See solution")`

The two chunks you have created should look as follows:

``` r
#| echo: false
#| warning: false 
#| message: false 

library(ggplot2) 
library(tidyverse) 
library(gt) 
library(MASS) l
library(patchwork) 
library(moderndive)
```

``` r
#| echo: false
 Irs <- iris %>%
   dplyr::select(Sepal.Width, Sepal.Length, Species) 
```

`r unhide()`
:::

## Inline code

```{r nobs, echo = FALSE, eval = TRUE, warning = FALSE}
n <- nrow(evals.scores)
```

R code can be included within text by enclosing the code with `` `r ` ``. This allows for expressions to be evaluated by R and not be hardwired by the user. For example, if you wanted to convey the number of observations within `evals.scores` then we can enclose `nrow(evals.scores)` within `` `r ` `` to obtain the number of observations, rather than hardwiring 463 into the text. This can help to prevent potential human error when presenting information. It can also help with consistency and ease-of-use, since `n = nrow(evals.scores)` could be stored as an R object and referred to whenever necessary within the text using inline R code.

# Tables

There are several ways to produce tables in Quarto . Here, a couple of different approaches will be presented. The first approach uses the `gt()` function from the `gt` package and essentially recieves a data frame as input and then puts a wrapper around the tables produced in R in order to make them more visually appealing within the Quarto document. Here we will just cover the basics, but if you want to learn more about creating eye-catching tables with `gt` visit [here](https://gt.rstudio.com/articles/intro-creating-gt-tables.html).

Let's say we wanted to create a table of the first 5 rows of the `iris` data from the `datasets` library. We can create the table using the `gt` function as follows:

```{r}
#| echo: true
#| warning: false
#| message: false
#| code-fold: show


library(gt)
iris %>% 
  slice_head(n=5) %>%
  gt() 

```

Lets customize this table a bit by (1) adding a table caption and a cross-referencing number (2) modifying the labels of the columns and (3) create a grouping structure for the petals and sepals width and length columns:

```{r}
#| echo: fenced
#| label: tbl-iris
#| tbl-cap: First five entries of the iris Data set

iris %>%
  slice_head(n=5)  %>%
  gt()  %>%
   fmt_number(decimals=2)  %>%
 tab_spanner(
    label = "Sepals",
    columns = c(Sepal.Length, Sepal.Width)
  )  %>%
  tab_spanner(
    label = "Petals",
    columns = c(Petal.Length, Petal.Width)
  )  %>%
  cols_label(
    Sepal.Length = html("Length (cm)"),
    Sepal.Width = html("Width (cm)"),
    Petal.Length = html("Length (cm)"),
    Petal.Width = html("Width (cm)")
  )
```

The first thing we've done is to add a table label using `label: tbl-iris` .This will allow us to add cross-reference in the text (remember to use the `tbl-` prefix to make them cross-referenceable). For example we can write `@tbl-iris` in our document to reference and create an hyperlink directed to the @tbl-iris (you can also use the tool bar `Insert▾➠ Cross Reference` to do this). Then, the option `tbl-cap:` allow us to add caption to the table. Finally, we can make the table more appealing by setting the number of decimals to 2 with the `fmt_number` function and then we use the `tab_spanner` and `cols_label` functions to change some features of our `gt` table.

::: {.callout-warning icon="false"}
## {{< bi pencil-square color=#c8793c >}} Task

Add two separate chunks in your exploratory analysis that produce the following tables:

1.  A table displaying the mean, median and standard deviation for sepal width and length for each of the three different species of iris.

2.  A table displaying the Pearson correlation between sepal width and length by species.

Round each value to 2 decimals and use appropriate column headings for each table. Then add a sensible table caption and a cross-referencing number. Comment on this output in the main body of your document while using clickable hyperlinks whenever referencing each table.

Before you render your document make sure that the source code for these chunks is hidden.

`r hide("Take hint")`

Use the `summarise` function to compute the mean, median and standard deviation of the `Petal.Length` and `Sepal.Length`variables grouped `.by` the `Sepcies` variable. Then use the `gt()` function to produce the table using `fmt_number` and `cols_label` to modify the number of decimals and column labels accordingly.

`r unhide()`

`r hide("See solution")`

Your chunks should look something like this:

``` {.r .code-overflow-wrap style=".code-overflow-wrap"}
#| echo: false
#| label: tbl-summary
#| tbl-cap:  Mean, median and standard deviation (sd) sepal width and length by species of iris.

Irs |>
   summarize('Width.Mean' = mean(Sepal.Width),
             'Width.Median' = median(Sepal.Width),
             'Width.sd' = sd(Sepal.Width),
             'Length.Mean' = mean(Sepal.Length),
             'Length.Median' = median(Sepal.Length),
             'Length.sd' = sd(Sepal.Length),
             .by = Species) |>
 gt() |> 
  fmt_number(decimals=2) |>
  tab_spanner(
    label = "Width",
    columns = c(Width.Mean, Width.Median,Width.sd)
  ) |>
  tab_spanner(
    label = "Length",
    columns = c(Length.Mean, Length.Median,Length.sd)
  ) |>
  cols_label(
    Width.Mean = html("Mean"),
    Width.Median = html("Median"),
    Width.sd = html("Std.Dev"),
    Length.Mean = html("Mean"),
    Length.Median = html("Median"),
    Length.sd = html("Std.Dev")
  )
```

``` {.r .code-overflow-wrap}
#| echo: false
#| label: tbl-cor
#| tbl-cap: Correlation between sepal width and length by species.

Cors <- Irs |>
        summarize('Correlation' = cor(Sepal.Width, Sepal.Length),
                  .by = Species)
Cors |> 
  gt() |>
  fmt_number(decimals=2) |>
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_column_labels())
```

Then, `@tbl-summary` and `@tbl-cor` should be used in the text to reference the corresponding table.

`r unhide()`
:::

## Tables 'by hand'

Tables can also be produced 'by hand' in Quarto. Here is an example of how we can recreate the table above corresponding to the first 5 rows of the `iris` data.

::: panel-tabset
# `visual` mode view

On visual mode, this table can be created by clicking on the `Table` option in the toolbar (next to `Insert▾` while using the `visual` mode) and selecting the number of rows and columns. Here you can also add a caption to the table.

![](images/quarto7.png){fig-align="center" width="435"}

We can manually fill each entry to produce the following table:

| Sepal Length | Sepal Width | Petal Length | Petal Width | Species |
|:------------:|:-----------:|:------------:|:-----------:|--------:|
|     5.1      |     3.5     |     1.4      |     0.2     |  setosa |
|     4.9      |     3.0     |     1.4      |     0.2     |  setosa |
|     4.7      |     3.2     |     1.3      |     0.2     |  setosa |
|     4.6      |     3.1     |     1.5      |     0.2     |  setosa |
|     5.0      |     3.6     |     1.4      |     0.2     |  setosa |

: The fist 5 rows of the iris data.

# `source` mode view

On `source` mode, the raw markdown code that produces this table is the following:

```         
| Sepal Length | Sepal Width | Petal Length | Petal Width | Species |
|:------------:|:-----------:|:------------:|:-----------:|--------:|
|     5.1      |     3.5     |     1.4      |     0.2     |  setosa |
|     4.9      |     3.0     |     1.4      |     0.2     |  setosa |
|     4.7      |     3.2     |     1.3      |     0.2     |  setosa |
|     4.6      |     3.1     |     1.5      |     0.2     |  setosa |
|     5.0      |     3.6     |     1.4      |     0.2     |  setosa |
: The fist 5 rows of the iris data. {#tbl-iris}
```

In here, the vertical separators `|` are used between columns, while `---` is placed below table/column headings. Alignment of the columns is done using colons, that is, for left alignment put `:---`, for right alignment put `---:`, and for centred alignment put `:---:`. For these sorts of tables, you can add a caption below the table and then include a `#tbl- label` in braces at the end of the caption for cross-referencing.
:::

For example, the table above corresponding to the first 5 rows of the `iris` data can be produced by hand by clicking on the `Table` option in the toolbar (next to `Insert▾` while using the `visual` mode) and selecting the number of rows and columns.

::: callout-note
You can read more about authoring Quarto tables [here](https://quarto.org/docs/authoring/tables.html).
:::

::: callout-tip
You can use the `kable()` function from the [kableExtra](https://haozhu233.github.io/kableExtra/) library to output a markdown formatted table using as input a data frame or matrix. Then you can copy-paste this in your quarto document. For example try the following code and paste its output yo your quarto document:

```{r}
#| eval: false
#| code-fold: false
library(kableExtra)
iris %>%
  slice_head(n=5)  %>% kable(digits = 2)
```

Of course, you can use the `kable` function instead of `gt` within a chunk. The html output will be rendered the same way in Quarto. `kable` might be more straightforward and easier to implement while gt will give you more control and customization over the layout of your tables. Ultimately, it's a matter of personal preference and which one you feel more comfortable using.
:::

## **Summary of Regression Models as HTML Tables**

In this section we briefly introduce the package `sjPlot` to create HTML-tables that will be displayed nicely in your Quarto document. We will focus on the `tab_model()` function, which receives as argument a single or multiple models fitted with the `lm` or `glm` engine (other models, like hurdle- or zero-inflated models, also work with this function).

::: callout-important
HTML is the only output-format, you can\'t (directly) create a LaTex or PDF output from [`tab_model()`](https://strengejacke.github.io/sjPlot/reference/tab_model.html) and related table-functions. 
:::

For example, say we want to create a nice html table of a linear model fitted to the `evals` data set:

```{r}
#| code-fold: false
#| message: false
#| warning: false

library(sjPlot)
model_evals <- lm(score~bty_avg,evals.scores)
```

Then we can simply add the following chunk to display the @tbl-lm_eval_scores below:

``` r
#| tbl-cap: "Summaries of the linear model fitted to the evaluation scores data set.
#| label: tbl-lm_eval_scores
tab_model(model_evals)
```

```{r}
#| tbl-cap: "Summaries of the linear model fitted to the evaluation scores data set."
#| label: tbl-lm_eval_scores
#| echo: false
tab_model(model_evals)
```

[`tab_model()`](https://strengejacke.github.io/sjPlot/reference/tab_model.html) has some argument that allow to show or hide specific columns from the output:

-   `show.ci` to show/hide the column with confidence intervals.

-   `show.se` to show/hide the column with standard errors.

-   `show.p` to show/hide the column with p-values.

-   `show.r2` to show/hide $R^2$ values.

-   `show.obs` to show/hide the number of observation.

Other useful arguments are `collapse.ci` and `collapse.se` which collapse the columns for confidence intervals and standard errors one column together with the estimates. You can use the `pred.labels` argument to change the names of the coefficients in the *Predictors* column (note that the length of `pred.labels` must exactly match the amount of predictors in the *Predictor* column). Finally, you ca use the `dv.labels` to change the names of the model columns, which are labelled with the variable labels / names from the dependent variables. Will we check an example in an upcoming task.

::: callout-note
You can read more about `sjPlot` html regression model tables [here](https://strengejacke.github.io/sjPlot/articles/tab_model_estimates.html).
:::

# Figures

## Embedding external images

Including plots and figures within a Quarto document is straightforward. To include an external figure you can use the `visual` mode tool bar and click on `Insert▾➠ Figure/Image...` and then browse to the path where you image is, or alternatively write the *url* from which the image should be obtained. The pop-up windows allows you also to write a caption and also to modify the image alignment with respect the main text.

![](images/quarto8.png){fig-align="center"}

If you want to add cross-referencing you can add the `fig-` prefix in the attributes tab of the pop-up windows:

![](images/quarto9.png){fig-align="center" width="379"}

The source code would then look something like:

``` r
![](images/myimage.png){#fig-image1}
```

## Embedding R generated figures

Very often we would like to use the R plots generated from your analysis instead of using external figures. To achieve this, the R code for the plot is simply included within a code chunk including additional arguments for plot size and positioning. For example, to include the scatterplot of teaching and beauty:

::: panel-tabset
# R ggplot

```{r}
#| echo: false
#| label: fig-scatterplot1
#| fig-cap: Relationship between teaching and beauty scores. The best-fitting line has been superimposed.
#| fig-width: 4
#| fig-height: 3
#| fig-align: center
#| message: false

ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Teaching Score") +
  geom_smooth(method = "lm", se = FALSE)
```

# R chunk code

``` r
#| label: fig-scatterplot1
#| fig-cap: Relationship between teaching and beauty scores. The best-fitting line has been superimposed.
#| fig-width: 4
#| fig-height: 3
#| fig-align: center
#| message: false

ggplot(evals.scores, aes(x = bty_avg, y = score)) +
  geom_point() +
  labs(x = "Beauty Score", y = "Teaching Score") +
  geom_smooth(method = "lm", se = FALSE)
```
:::

Here, we set the chunk label to include the `fig-` prefix so we can cross-reference using the \@ prefix. For example `@fig-scatterplot1` will create a hyperlink to @fig-scatterplot1. Then we added a figure caption using the `fig-cap` option. For size and positioning of the figure we can include:

-   `fig.width`: an integer value denoting the width of the figure;
-   `fig.height`: an integer value denoting the height of the figure;
-   `fig.align`: the alignment of the figure within the body of the document

::: {.callout-tip icon="false"}
## {{< bi question-octagon color=#6dc83c >}} Question

What other argument would you need to include if you wish to show the chunk plot output only?

`r mcq(c("eval: false","echo: true",answer="echo: false","eval: true"))`
:::

::: {.callout-warning icon="false"}
## Task

Create a new chunk in your exploratory analysis section that displays a scatter plot showing the relationship between sepal width and length by species. Re-size and align the plot accordingly, add a caption and a cross-reference label. Finally write some comments in the main body while cross-referencing the plot you created.

`r hide("see solution")`

Your new chunk should look something like this:

``` {.r .code-overflow-wrap}
#| echo: false
#| fig-cap: Relationship between sepal width and sepal length by species.
#| label: fig-scatter
#| fig-align: center
#| fig-width: 4.5
#| fig-height: 3.5

ggplot(Irs, aes(x = Sepal.Length,
                y = Sepal.Width,
                color = Species)) +
  geom_point() +
  labs(x = "Sepal length (in centimetres)", 
       y = "Sepal width (in centimetres)",
       color = "Species") 
```

Then, `@fig-scatter` should be used in the text description to refer to this plot.

`r unhide()`
:::

::: callout-note
You can read more about authoring Quarto figures [here](https://quarto.org/docs/authoring/figures.html).
:::

# Mathematics

Mathematical and statistical equations can be presented nicely within a Quarto document. For example, the following equation referring to a linear regression model:

$$y_i = \alpha + \beta x_i + \epsilon_i, ~~~~ \epsilon_i \sim N(0, \sigma^2),$$ can be specified using the following syntax:

``` {.latex .code-overflow-wrap}
$$ y_i = \alpha + \beta x_i + \epsilon_i, ~~~~~ \``epsilon_i``\sim N(0, \sigma^2), $$
```

That is, we use:

-   `$$` signs to produce mathematics which is centred, and a single `$` to include mathematics within a sentence or paragraph; in visual mode you can go to `Insert ▾  ➠ LaTeX Math ▸` and chose between `Inlay Math` or `Display Math`.
-   `_` and `^` are used for subscripts and superscripts, respectively;
-   Greek letters are obtained using `\` and the letters name, i.e. `\alpha` gives $\alpha$; and
-   tildes (`~`) are used to put spacing between notation.

If you have a categorical variable then you would write it using an indicator function. For example, if we have gender as a categorical variable, where females are the baseline category, then we could write our model as follows:

$$y_i = \alpha + \beta_{\mbox{Male}} \cdot \mathbb{I}_{\mbox{Male}}(x),$$

``` {.latex .code-overflow-wrap}
$$y_i = \alpha + \beta_{\mathrm{Male}} \cdot \mathbb{I}_{\mathrm{Male}}(x),$$
```

where $\mathbb{I}_{\mbox{Male}}(x)$ (`$\mathbb{I}_{\mathrm{Male}}(x)$`) is an indicator function such that

$$
\mathbb{I}_{\mathrm{Male}}(x) =
\begin{cases} 
1 ~ \text{if the gender of the }x\text{th observation is Male},\\
0 ~ \text{otherwise}
\end{cases}
$$

We can use the `\begin{cases}...\end{cases}` functions from the `amsmath` Latex package (available already in Quarto) to replicate this expression:

``` latex
$$
\mathbb{I}_{\mathrm{Male}}(x) =
\begin{cases} 
1 ~ \text{if the gender of the }x\text{th observation is Male},\\
0 ~ \text{otherwise}
\end{cases}
$$
```

Note that we used `\text()` to bypass any text format emebbded within a mathematical expression. For LaTeX more experienced users, you might find easier to use a `raw Tex Block` instead. This allows you write more complex mathematical expressions using standard LaTeX commands. However, you will only be able to see the compiled expressions in you rendered document. Here is an example of a mathematical expression using the LaTeX align environment:

::: panel-tabset
# TeX Block in `visual` mode

To insert a raw Tex Block go to `Format ▾  ➠ Raw ▸ Tex Block`

This will add a text box that can fill in with your mathematical expression, e.g.

``` latex
\begin{align}
y_i &\sim \mathrm{Normal}(\mu_i,\sigma^2) \\
\mu_i &= \beta_0 + \beta_1 x_i
\end{align}
```

When rendered, this will produce:

```{=tex}
\begin{align}
y_i &\sim \mathrm{Normal}(\mu_i,\sigma^2) \\
\mu_i &= \beta_0 + \beta_1 x_i
\end{align}
```
# Tex Block in `source` mode

To insert a raw tex block in source mode simply type:

```` latex
```{=tex}


```
````

and then fill in with your mathematical expressions e.g.,

```` latex
```{=tex}
\begin{align}
y_i &\sim \mathrm{Normal}(\mu_i,\sigma^2) \\
\mu_i &= \beta_0 + \beta_1 x_i
\end{align}
```
````

When rendered, this will produce:

```{=tex}
\begin{align}
y_i &\sim \mathrm{Normal}(\mu_i,\sigma^2) \\
\mu_i &= \beta_0 + \beta_1 x_i
\end{align}
```
:::

::: {.callout-warning icon="false"}
## {{< bi pencil-square color=#c8793c >}} Task

Try to write the LaTeX code for the correlation coefficient between two random variables $x$ and $y$:

$$
\rho (x,y) = \dfrac{\sum_{i=1}^n (x_i -\bar{x})(y_i-\bar{y})}{\sqrt{\sum_{i=1}^n (x_i-\bar{x})^2}\sqrt{\sum_{i=1}^n (y_i-\bar{y})^2}}
$$

`r hide("Take hint")`

You can use the `dfrac{}{}` command to write a fraction in display mode. The`\bar{}` can be used to place a bar over a character, and `\sqrt{}` to draw a square root symbol. See [here](https://kapeli.com/cheat_sheets/LaTeX_Math_Symbols.docset/Contents/Resources/Documents/index) for a detailed LaTeX Math Symbols cheat sheet.

`r unhide()`

`r hide("See Solution")`

``` {.r .code-overflow-wrap}
$$
\rho (x,y) = \dfrac{\sum_{i=1}^n (x_i -\bar{x})(y_i-\bar{y})}{\sqrt{\sum_{i=1}^n (x_i-\bar{x})^2}\sqrt{\sum_{i=1}^n (y_i-\bar{y})^2}}
$$
```

`r unhide()`
:::

::: {.callout-warning icon="false"}
## Task

In the formal analysis section, underneath the Statistical model sub-section, write the expression of a saturated model that explores the relationship sepal width and sepal length for each iris species (i.e. separate regression lines for each species). Then add a bullet list explaining each of the parameters of the model.

`r hide("see solution")`

The display math for the full model would look something like this:

``` tex
$$
y_{i} = \alpha + \beta_{\mbox{length}} \cdot \mbox{length} + \beta_{\mbox{species}} \cdot \mathbb{I}_{\mbox{species}}(x) + \beta_{\mbox{length, species}} \cdot \mbox{length} \cdot \mathbb{I}_{\mbox{species}}(x) + \epsilon_i
$$
```

Or if you want using a slightly more complex Raw Tex Block:

``` latex
\begin{align}
y_{i} &= \alpha + \beta_1 \cdot x_{1i} + \beta_2 \cdot x_{2i} + \beta_3 \cdot x_{1i} \cdot x_{2i} + \epsilon_i, ~~~~ \epsilon_i \sim N(0, \sigma^2), ~~~~ i=1,\ldots,150 \nonumber \\
&= \alpha + \beta_{\mbox{length}} \cdot \mbox{length} + \beta_{\mbox{species}} \cdot \mathbb{I}_{\mbox{species}}(x) + \beta_{\mbox{length, species}} \cdot \mbox{length} \cdot \mathbb{I}_{\mbox{species}}(x) + \epsilon_i, \nonumber
\end{align}
```

When compile it should appeared as:

-   <div>

    ```{=tex}
    \begin{align}
    y_{i} &= \alpha + \beta_1 \cdot x_{1i} + \beta_2 \cdot x_{2i} + \beta_3 \cdot x_{1i} \cdot x_{2i} + \epsilon_i, ~~~~ \epsilon_i \sim N(0, \sigma^2), ~~~~ i=1,\ldots,150 \nonumber \\
    &= \alpha + \beta_{\mbox{length}} \cdot \mbox{length} + \beta_{\mbox{species}} \cdot \mathbb{I}_{\mbox{species}}(x) + \beta_{\mbox{length, species}} \cdot \mbox{length} \cdot \mathbb{I}_{\mbox{species}}(x) + \epsilon_i, \nonumber
    \end{align}
    ```

    </div>

To add the description of each parameter you can click on the bullet list icon ![](images/bullets.png){width="27" height="24"} and use the appropiate math symbol, e.g.

-   `$\alpha$` is the intercept of the regression line for the baseline species (setosa);

which gets compiled as:

-   $\alpha$ is the intercept of the regression line for the baseline species (setosa);

`r unhide()`
:::

::: callout-note
For additional tricks inserting mathematics into documents see [here](https://quarto.org/docs/visual-editor/technical.html). For a complete tutorial on using LaTeX please see [here](https://latex-tutorial.com/).
:::

# Rendering

You can render a Quarto document or a presentation (see next section) by clicking the Render button ![](images/rstudio-render-button.png){width="22"}.

::: callout-note
Note that if you are working on a Quarto document you can also compile a PDF version of it by clicking on ![](images/rstudio-render-button.png){width="17" height="17"}`Render ▾ ➠`![](images/renderpdf.png){width="14"}`Render PDF`. However, if you are working on a Quarto presentation while using `revealjs` format then you need to render the presentation first in html and then export it as pdf by following these [instructions](https://quarto.org/docs/presentations/revealjs/presenting.html#print-to-pdf).
:::

When you render a Quarto document, the R code in you chunks is executed by the [knitr](http://yihui.name/knitr/) R-package and a new markdown (.md) document is then created. This file includes all of your code and its output. [pandoc](http://pandoc.org/) then processes this markdown to create the finished format. *The Render button encapsulates these actions and executes them in the right order for you.*

![](images/rstudio-qmd-how-it-works.png){fig-align="center"}

Note that HTML rendered documents will typically have a number of external dependencies (e.g. images, CSS style sheets, JavaScript, etc.) which are contained in an external `_files` directory alongside your document. If you share your HTML rendered file without the external files, it will lose all of its previous formatting and style. Alternatively, you can create a self-contained HTML document using the the `embed-resources` option in quarto as follows:

``` r
---
title: "Data Analysis: Example Report"
format:
  html:
    embed-resources: true
---
```

This will create standalone HTML file with no external dependencies that you can share with others (note that indentation here is important as you are calling arguments within the format output) .

::: callout-important
For your upcoming class test you want to make sure this option is set to `true` so your work can be displayed properly by a browser.
:::

::: {.callout-warning icon="false"}
## Task

Complete your Quarto report by fitting the full model describing the relationship between Sepal lenght and Sepal Width for each the iris species and then compared this to a parallel lines model. Interpret your results and check your final model assumption. Finalise with some conclusions (you can use the `Example report` as reference).

`r hide("take hint")`

In the original `Example report` we used stepwise selection analysis based on AIC to find the model with the lowest AIC. However, since we do not have a large number of candidate models, you can simply use the `tab_model()` function to compare the two nested models and display the results in one single output:

``` r
full.model <- lm(Sepal.Width ~ Sepal.Length * Species, data = Irs)
par.model <- lm(Sepal.Width ~ Sepal.Length + Species, data = Irs)
tab_model(full.model,par.model,
          show.aic = T,
          show.obs = F,
          dv.labels = c("Interaction model","Pararell lines model"))
```

`r unhide()`
:::

# Quarto Presentations

Another great feature of Quarto is that it allows you to create presentations and supports a variety of formats such as [html](https://quarto.org/docs/presentations/revealjs/), [power point](https://quarto.org/docs/presentations/powerpoint.html) and [beamer](https://quarto.org/docs/presentations/beamer.html). Today we will focus on creating an html presentation (which can be also printed as a pdf).

Creating an html presentation is as easy as setting the output format to `revealjs`:

``` r
---
title: "My title"
author: "Jafet Belmont"
format: revealjs
---
```

This will create a title slide that includes the provided `title` and `author`. (you can remove any of these options if you the author or title page to be removed). Now we will switch to the `visual` mode. You will notice that a new set of options have now appeared:

![](images/quarto13.png){fig-align="center"}

This new tab will allow us to interact with the different features of our presentation. Lets begin by creating some slides. Slides in Quarto are delineated using level 1 and 2 headings:

``` r
---
title: "My title"
author: "Jafet Belmont"
format: revealjs
---

# Topic 1

## Slide 1.1

# Topic 2

## Slide 2.1
```

In the example above we use level 1 headings for creating a new sections and level 2 heading for defining the new slides. Alternatively we can use horizontal rules to create the slides as follows (on `visual` mode click on `Insert▾ ➠ Horizontal Rule`):

``` r
---
title: "My title"
author: "Jafet Belmont"
format: revealjs
---
  Content of slide 1
---
  Content of slide 2
---
```

You can add bullet and numbered lists to each slide as follows (on `visual` mode click on ![](images/bullets.png){width="24" height="25"} or ![](images/numbered.png){width="30" height="25"} for adding bullet or numbered lists respectively):

``` r
---
title: "My title"
author: "Jafet Belmont"
format: revealjs
---

## Slide 1

1.  Item 1
2.  Item 2

## Slide 2

-   Bullet 1
    -   Bullet 1.1
    -   Bullet 1.2

-   Bulet 2
    -   Bullet 2.1
    -   Bullet 2.2
```

Notice that indentation allow us to create a hierarchical structure within our lists of items. You can modify some of the option of the list by clicking the ![](images/threedots.png){width="15"} button on the right side of it. This will open a pop-up window where you can modify some of its attributes. For example, you can ask Quarto to display each item one by one as you move forward through the slides:

![](images/quarto11.png){fig-align="center" width="366"}

If you want to arrange the content of you slide into different columns you can insert a multiple column output. To do this switch to `visual` mode and click on `Insert▾ ➠ Slide Columns`). You can then fill each column:

![](images/quarto12.png){fig-align="center"}

Sometimes the text size in your slide might be too large to fit in your slide and you would like to make it smaller. You can then use the .smaller class to use a smaller typeface so that more text fits on the slide.

``` r
---
title: "My title"
author: "Jafet Belmont"
format: revealjs
---

## Slide with small text {.smaller}
1.  Item 1
2.  Item 2
 
```

 If you are on the visual model, click on the slide settings ![](images/threedots.png){width="17"} and then type `.smaller` on the class box:

![](images/quarto14.png){fig-align="center" width="373"}

::: callout-note
Note that ideally you slides should not contain too much text and thus this is just a quick way around if you feel that you need a bit of extra space in your slide.
:::

R code can be embedded in any slides by including a R chunk in the same way as we did before. However, sometimes we would like to arrange the code output to be display in a "tidy" manner within the slide. To achieve this we can use the `output-location:` argument which has the following options:

-   `column`: Display output in a column adjacent to the code

-   `column-fragment`: Display output in a column adjacent to the code and delay showing it until its explicitly stepped through by advancing the slides.

-   `fragment`: Delay the output display until it is explicitly stepped through by advancing the slides.

-   `slide`: Display output on the subsequent slide.

    For example, the source code for a chunk within a slide containing an R code would look something like this:

    ``` r
    #| output-location: column-fragment

    ggplot(evals.scores, aes(x = bty_avg, y = score)) +
      geom_point() +
      labs(x = "Beauty Score", y = "Teaching Score") +
      geom_smooth(method = "lm", se = FALSE)
    ```
