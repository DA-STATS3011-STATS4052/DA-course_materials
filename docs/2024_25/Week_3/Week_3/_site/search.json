[
  {
    "objectID": "Week3Solutions.html",
    "href": "Week3Solutions.html",
    "title": "Week 3 Tasks Solutions",
    "section": "",
    "text": "library(tidyverse)\nlibrary(tidymodels)\nlibrary(moderndive)\nlibrary(gapminder)\nlibrary(skimr)\nlibrary(mvtnorm)\nlibrary(gridExtra)\nlibrary(ISLR)\n\n\nTasks\n\nExamine the relationship between teaching score and age in the evals data set. What is the value of the correlation coefficient? How would you interpret this verbally? Finally, produce a scatterplot of teaching score and age.\n\n\nevals.age &lt;- evals |&gt;\n  select(score, age)\nevals.age |&gt;\n  get_correlation(formula = score ~ age)\n\n# A tibble: 1 × 1\n     cor\n   &lt;dbl&gt;\n1 -0.107\n\nggplot(evals.age, aes(x = age, y = score)) +\n  geom_point() +\n  labs(x = \"Age\", y = \"Teaching Score\",\n       title = \"Relationship between Teaching Score and Age\")\n\n\n\n\n\n\nPerform a formal analysis of the relationship between teaching score and age by fitting a simple linear regression model. Superimpose your best-fitting line onto your scatterplot from Task 1.\n\n\nevals.age &lt;- evals |&gt;\n  select(score, age)\nmodel &lt;- linear_reg() |&gt; fit(score ~ age, data = evals.age)\nmodel$fit\n\n\nCall:\nstats::lm(formula = score ~ age, data = data)\n\nCoefficients:\n(Intercept)          age  \n   4.461932    -0.005938  \n\nggplot(evals.age, aes(x = age, y = score)) +\n  geom_point() +\n  labs(x = \"Age\", y = \"Teaching Score\",\n       title = \"Relationship between Teaching Score and Age\") +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nAssess the model assumptions from Task 2 by plotting the residuals against the explanatory variable and fitted values, respectively. Also, plot a histogram of the residuals to assess whether they are normally distributed.\n\n\nevals.age &lt;- evals |&gt;\n  select(score, age)\nmodel &lt;- linear_reg() |&gt; fit(score ~ age, data = evals.age)\nregression.points &lt;- get_regression_points(model$fit)\nggplot(regression.points, aes(x = age, y = residual)) +\n  geom_point() +\n  labs(x = \"Age\", y = \"Residual\") +\n  geom_hline(yintercept = 0, col = \"blue\", size = 1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\nggplot(regression.points, aes(x = score_hat, y = residual)) +\n  geom_point() +\n  labs(x = \"Fitted values\", y = \"Residual\") +\n  geom_hline(yintercept = 0, col = \"blue\", size = 1)\n\n\n\nggplot(regression.points, aes(x = residual)) +\n  geom_histogram(binwidth = 0.25, color = \"white\") +\n  labs(x = \"Residual\")\n\n\n\n\n\n\nPerform the same analysis we did on life expectancy from the gapminder data set in 2007. However, subset the data for the year 1997. Are there any differences in the results across this 10 year period?\n\ngapminder1997 &lt;- gapminder |&gt;\n  filter(year == 1997) |&gt;\n  select(country, continent, lifeExp)\n\nlifeExp.continent &lt;- gapminder1997 |&gt;\n  summarize(median = median(lifeExp), mean = mean(lifeExp),.by=continent)\nlifeExp.continent\n\n# A tibble: 5 × 3\n  continent median  mean\n  &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Asia        70.3  68.0\n2 Europe      76.1  75.5\n3 Africa      52.8  53.6\n4 Americas    72.1  71.2\n5 Oceania     78.2  78.2\n\nlifeExp.model &lt;- linear_reg() |&gt; fit(lifeExp ~ continent, data = gapminder1997)\nlifeExp.model\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = lifeExp ~ continent, data = data)\n\nCoefficients:\n      (Intercept)  continentAmericas      continentAsia    continentEurope  \n            53.60              17.55              14.42              21.91  \n continentOceania  \n            24.59  \n\n\n\nReturn to the Credit data set and fit a multiple regression model with Balance as the outcome variable, and Income and Age as the explanatory variables, respectively. Assess the assumptions of the multiple regression model.\n\n\nCred &lt;- Credit |&gt;\n  select(Balance, Income, Age)\n\nCred |&gt;\n  skim()\n\n\nData summary\n\n\nName\nCred\n\n\nNumber of rows\n400\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nBalance\n0\n1\n520.02\n459.76\n0.00\n68.75\n459.50\n863.00\n1999.00\n▇▅▃▂▁\n\n\nIncome\n0\n1\n45.22\n35.24\n10.35\n21.01\n33.12\n57.47\n186.63\n▇▂▁▁▁\n\n\nAge\n0\n1\n55.67\n17.25\n23.00\n41.75\n56.00\n70.00\n98.00\n▆▇▇▇▁\n\n\n\n\nCred |&gt;\n  cor()\n\n            Balance    Income         Age\nBalance 1.000000000 0.4636565 0.001835119\nIncome  0.463656457 1.0000000 0.175338403\nAge     0.001835119 0.1753384 1.000000000\n\nggplot(Cred, aes(x = Age, y = Balance)) +\n  geom_point() +\n  labs(x = \"Age (in years)\", y = \"Credit card balance (in $)\",\n       title = \"Relationship between balance and age\") +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nBalance.model &lt;- linear_reg() |&gt; fit(Balance ~ Age + Income, data = Cred)\ntidy(Balance.model)\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)   360.      70.4        5.11 4.97e- 7\n2 Age            -2.19     1.20      -1.82 6.91e- 2\n3 Income          6.24     0.587     10.6  2.20e-23\n\nregression.points &lt;- get_regression_points(Balance.model$fit)\n\nggplot(regression.points, aes(x = Income, y = residual)) +\n  geom_point() +\n  labs(x = \"Income (in $1000)\", y = \"Residual\", title = \"Residuals vs income\")  +\n  geom_hline(yintercept = 0, col = \"blue\", size = 1)\n\n\n\nggplot(regression.points, aes(x = Age, y = residual)) +\n  geom_point() +\n  labs(x = \"Age (in years)\", y = \"Residual\", title = \"Residuals vs age\")  +\n  geom_hline(yintercept = 0, col = \"blue\", size = 1)\n\n\n\nggplot(regression.points, aes(x = residual)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Residual\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 3: Regression modelling part 1",
    "section": "",
    "text": "Now that we are comfortable with visualising and manipulating data in R, we can now proceed onto modelling data. The key idea behind modelling data is to infer the relationship between an:\n\n\noutcome (or response) variable \\(y\\) and\nan explanatory (or predictor) variable \\(x\\), which can also be referred to as an independent variable or covariate.\n\nModelling can be used for two purposes:\n\nExplanation: For describing the relationship between an outcome variable \\(y\\) and an explanatory variable x, and determining the potential significance of such relationships using quantifiable measures.\nPrediction: for predicting the outcome variable \\(y\\) given information from one or more explanatory variables.\n\nThere are many different modelling techniques. However, we will begin with one of the easier to understand and commonly-used approaches, linear regression. In particular, we will start by looking at simple linear regression, where we only have one explanatory variable.\nNote: Additional information and examples can be found in Chapter 6 of An Introduction to Statistical and Data Science via R."
  },
  {
    "objectID": "index.html#exploratory-data-analysis",
    "href": "index.html#exploratory-data-analysis",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n3.1 Exploratory data analysis",
    "text": "3.1 Exploratory data analysis\nBefore you ever do any statistical modelling of data, you should always perform an exploratory data analysis of the data. Performing an exploratory data analysis can give us an idea of the distribution of the data, and whether it contains any strange values, such as outliers or missing values. However, more importantly, it is used to inform which statistical model we should fit to the data. An exploratory data analysis may involve:\n\nLooking at the raw values of the data, either by looking at the spreadsheet directly, or using R.\nBy computing various summary statistics, such as the five-number summary, means, and standard deviations.\nPlotting the data using various data visualisation techniques.\n\nLet’s examine the data evals. We can look at the raw values from evals using the RStudio pop-up spreadsheet viewer using:\n\nCodeView(evals)\n\n\nAt the moment we are only really interested in the instructors teaching (score) and beauty (bty_avg) scores, and so we can look at a subset of the data as follows:\n\nCodeevals.scores &lt;- evals |&gt;\n  select(score, bty_avg)\n\n\nThe outcome variable score is a numerical average of the average teaching score based on students’ evaluations between 1 and 5. The explanatory variable bty_avg is the numerical variable of the average beauty score from a panel of six students’ scores between 1 and 10. As both variables are numerical, we can compute summary statistics for them using the skim function from the skimr package as follows:\n\nCodeevals.scores |&gt;\n  skim()\n\n\nData summary\n\n\nName\nevals.scores\n\n\nNumber of rows\n463\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nscore\n0\n1\n4.17\n0.54\n2.30\n3.80\n4.30\n4.6\n5.00\n▁▁▅▇▇\n\n\nbty_avg\n0\n1\n4.42\n1.53\n1.67\n3.17\n4.33\n5.5\n8.17\n▃▇▇▃▂\n\n\n\n\n\nThis provides us with the following information:\n\n\nmissing: the number of missing values.\n\ncomplete: the number of non-missing values.\n\nn: the total number of observations.\n\nmean: the mean or average.\n\nsd: the standard deviation.\n\np0: the \\(0^{th}\\) percentile: the value at which 0% of values are smaller than it (i.e. the minimum).\n\np25: the \\(25^{th}\\) percentile: the value at which 25% of values are smaller than it (i.e. the 1st quartile).\n\np50: the \\(50^{th}\\) percentile: the value at which 50% of values are smaller than it (i.e. the median).\n\np75: the \\(75^{th}\\) percentile: the value at which 75% of values are smaller than it (i.e. the 3rd quartile).\n\np100: the \\(100^{th}\\) percentile: the value at which 100% of values are smaller than it (i.e. the maximum).\n\nhist: provides a snapshot of a histogram of the variable.\n\nThese summary statistics give us an idea of how both variables are distributed. For example, the mean teaching score (score) is 4.17 out 5, while the mean beauty score (bty_avg) is 4.42 out of 10. Also, the middle 50% of the data for score lies between 3.8 and 4.6, while the middle 50% of bty_avg lies between 3.17 and 5.5."
  },
  {
    "objectID": "index.html#correlation",
    "href": "index.html#correlation",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n3.2 Correlation",
    "text": "3.2 Correlation\nThe above summary statistics provide information about each variable separately. However, we are interested in a potential relationship between the two variables and as such it would be of interest to evaluate some statistic that considers both variables simultaneously. One such statistic is the correlation, which ranges between -1 and 1 and describes the strength of the linear relationship between two numerical variables, such that\n\n-1 indicates a perfect negative relationship. That is, as the values of one variable increase, the values of the other decrease.\n0 indicates no relationship. The values of both variables increase/decrease independently of one another.\n1 indicates a perfect positive relationship. That is, the values of both variables increase simultaneously.\n\nThe correlation coefficient \\(\\rho(\\cdot)\\) between two variables \\(x\\) and \\(y\\) can be computed as:\n\\[\n\\rho (x,y) = \\dfrac{\\sum_{i=1}^n (x_i -\\bar{x})(y_i-\\bar{y})}{\\sqrt{\\sum_{i=1}^n (x_i-\\bar{x})^2}\\sqrt{\\sum_{i=1}^n (y_i-\\bar{y})^2}}\n\\]\nHere, \\(\\bar{x}\\) and \\(\\bar{y}\\) denotes the mean of \\(x_i\\) and \\(y_i\\) respectively across \\(i= 1,\\ldots,n\\) observations.The plot below displays scatterplots for hypothetical numerical variables \\(x\\) and \\(y\\) simulated to have different levels of correlation.\n\n\n\n\nDiffering levels of correlation between variables.\n\n\n\nThe correlation coefficient can be computed in R using the get_correlation function from the moderndive package. The function requires two numerical variables separated by ~ (or ‘tilde’), much like the formula syntax, such that the outcome variable score is put on the left-hand-side of the formula, and the explanatory variable bty_avg is placed on the right-hand-side of the formula:\n\nCodeevals.scores |&gt;\n  get_correlation(formula = score ~ bty_avg)\n\n# A tibble: 1 × 1\n    cor\n  &lt;dbl&gt;\n1 0.187\n\n\nHere, we are given a correlation coefficient of 0.187 for the relationship between teaching (score) and beauty (bty_avg) scores. This suggests a rather weakly positive linear relationship between the two variables. There is some subjective interpretation surrounding correlation coefficients not very close to -1, 0, 1. The table below provides a rough guide as to the verbal interpretation of a correlation coefficient.\n\n\n\n\n\n\nCorrelation coefficient\nVerbal interpretation\n\n\n\n0.90 to 1.00 (-0.90 to -1.00)\nVery strong positive (negative) correlation\n\n\n0.70 to 0.90 (-0.70 to -0.90)\nStrong positive (negative) correlation\n\n\n0.50 to 0.70 (-0.50 to -0.70)\nModerate positive (negative) correlation\n\n\n0.30 to 0.50 (-0.30 to -0.50)\nWeak positive (negative) correlation\n\n\n0.00 to 0.30 (0.00 to -0.30)\nVery weak positive (negative) correlation\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe cor function can also be used to compute the correlation coefficient. For more details type ?cor into the R console.\n\n\nThe next step in our exploratory data analysis is to visualise the data using appropriate plotting techniques. Here, a scatterplot is appropriate since both score and bty_avg are numerical variables:\n\nCodeggplot(evals.scores, aes(x = bty_avg, y = score)) +\n  geom_point()\n\n\n\n\n\n\nRelationship between teaching and beauty scores.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe outcome variable should always be plotted on the y-axis.\n\n\nWhat can we observe from the scatterplot? Well, here it can be hard to see the weakly positive linear relationship suggested by the correlation coefficient (0.187), which is why our correlation coefficient is considered very weak in the verbal interpretation.\nAdditionally, as our numerical variables are averages of integers (or whole numbers), a lot of the values will be plotted on top of one another. Remember, from Session 1, that this is referred to as over-plotting, and can be alleviated by slightly nudging (jittering) the points in a random direction. For example, let’s look at the three points in the top-right of the scatterplot that have a beauty score slightly less than 8. Are there really only three values plotted there, or are there more that we cannot see due to over-plotting? Let’s find out by adding some jitter to the plot:\n\n\n\n\nComparing regular and jittered scatterplots.\n\n\n\nFrom the jittered scatterplot we can see that:\n\nThere are actually more than just three points plotted in the top-right; and\nThere are more instructors with a beauty score between 3 and 4.5 than originally appears due to over-plotting.\n\n\n\n\n\n\n\nNote\n\n\n\nJittering does not actually change the values within a data set, it is merely a tool for visualisation purposes. Hence, we shall continue on with plotting the original data."
  },
  {
    "objectID": "index.html#formal-analysis",
    "href": "index.html#formal-analysis",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n3.3 Formal analysis",
    "text": "3.3 Formal analysis\nAfter completing an exploratory data analysis the next step is to perform a formal analysis on the data. This involves constructing an appropriate statistical model from the information gathered during the exploratory data analysis step. Here, we shall be fitting a simple linear regression model to the data on teaching and beauty scores, where our objective is to acquire the best fitting regression line. This is done by finding estimates of the intercept (\\(\\alpha\\)) and slope (\\(\\beta\\)) which give us the best-fitting line to the data. This can be done in R using the lm function. However, in this module we will explore the tidymodels R-package which contains a wide variety of modeling approaches. To fit a linear regression model we can use the linear_reg() function.\n\n\n\n\n\n\nNote\n\n\n\nThe linear_reg() function uses the lm engine as the default estimation approach. However, different estimations methods that wou will cover in future course are also available (see ?linear_reg() for a complete list of the available engines).\n\n\nOnce we declare the engine we want to use (in this case we will use the default settings), the model can be estimated by using the fit() function as follows:\n\nCodemodel &lt;- linear_reg() |&gt;\n  fit(score ~ bty_avg, data = evals.scores)\nmodel$fit\n\n\nCall:\nstats::lm(formula = score ~ bty_avg, data = data)\n\nCoefficients:\n(Intercept)      bty_avg  \n    3.88034      0.06664  \n\n\nThe fitted model (the lm object in this case) can be accessed by calling $fit to the model we built. This tells us that our best-fitting line to the data is:\n\\[\\widehat{\\mbox{score}} = \\widehat{\\alpha} + \\widehat{\\beta} x_i = 3.88034 + 0.06664 \\cdot \\mbox{bty\\_avg},\\] where\n\n\n\\(\\widehat{\\alpha} = 3.88034\\) is the intercept coefficient and means that, for any instructor with a bty_avg = 0, their average teaching score would be 3.8803. Note that bty_avg = 0 is not actually possible as bty_avg is an average of beauty scores ranging between 1 and 10.\n\n\\(\\widehat{\\beta} = 0.06664\\) is the slope coefficient associated with the exploratory variable bty_avg, and summarises the relationship between score and bty_avg. That is, as bty_avg increases, so does score, such that\n\nFor every 1 unit increase in bty_avg, there is an associated increase of, on average, 0.06664 units of score.\n\n\n\nWe can ask for a model summary using the tidy function that will return the output in a data.frame format:\n\nCodetidy(model)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)   3.88      0.0761     51.0  1.56e-191\n2 bty_avg       0.0666    0.0163      4.09 5.08e-  5\n\n\nFinally, we can superimpose our best-fitting line onto our scatterplot to see how it fits through the points using the geom_smooth function as follows:\n\nCodeggplot(evals.scores, aes(x = bty_avg, y = score)) +\n  geom_point() +\n  labs(x = \"Beauty Score\", y = \"Teaching Score\", \n       title = \"Relationship of teaching and beauty scores\") +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\nRelationship between teaching and beauty scores with regression line superimposed.\n\n\n\nNow that we have fitted our simple linear regression model to the data, how do we use it to obtain information on individual data points? This can be done by looking at the fitted values. For example, let’s say we are interested in looking at the 21st instructor who has the following teaching and beauty scores:\n\n\nscore\nbty_avg\n\n\n4.9\n7.33\n\n\nWhat would the score be on our best-fitting line for this instructor with a bty_avg of 7.33? We simply plug the instructor’s bty_avg into our regression model:\n\\[\\widehat{\\mbox{score}} = 3.88034 + 0.06664 \\cdot \\mbox{bty\\_avg} = 3.88034 + 0.06664 \\cdot 7.33 = 4.369,\\] The regression model gives our instructor a score of 4.369. However, we know the score of the instructor is 4.9 meaning that our model was out by 0.531. This is known as the residual (\\(\\epsilon\\)) and can be thought of as the error or lack of fit of the regression line. In this case, the residual is given by:\n\\[ \\widehat{\\epsilon} = y - \\widehat{y} = 4.9 - 4.369 = 0.531.\\]This is essentially the distance between the fitted regression line and the observed (true) value. This can be seen on the following scatterplot:\n\n\n\n\nExample of observed value, fitted value, and residual.\n\n\n\nwhere\n\nthe red circle is the observed (true) score (\\(y=4.9\\)) of the instructor;\nthe red square is the fitted value (\\(\\widehat{y} = 4.369\\)) from the regression line; and\nthe blue arrow is the distance between the observed and fitted values, that is, the residual.\n\nTo obtain the fitted values and residuals for all instructors within the data set we can use the get_regression_points function:\n\nCoderegression.points &lt;- get_regression_points(model$fit)\nregression.points\n\n# A tibble: 463 × 5\n      ID score bty_avg score_hat residual\n   &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1     1   4.7    5         4.21    0.486\n 2     2   4.1    5         4.21   -0.114\n 3     3   3.9    5         4.21   -0.314\n 4     4   4.8    5         4.21    0.586\n 5     5   4.6    3         4.08    0.52 \n 6     6   4.3    3         4.08    0.22 \n 7     7   2.8    3         4.08   -1.28 \n 8     8   4.1    3.33      4.10   -0.002\n 9     9   3.4    3.33      4.10   -0.702\n10    10   4.5    3.17      4.09    0.409\n# ℹ 453 more rows\n\n\nThe table provides us with information on the:\n\n\nscore: the observed value of the outcome variable \\(y\\);\n\nbty_avg: the values of the explanatory variable \\(x\\);\n\nscore_hat: the values of the fitted values \\(\\widehat{y}\\); and\n\nresidual: the residuals \\(y - \\widehat{y}\\).\n\n\n\n\n\n\n\nNote\n\n\n\nResiduals and fitted values can also be obtained directly from the fitted model object:\n\nCode model_output &lt;- data.frame(score_hat  = model$fit$fitted.values,\n                            residuals = model$fit$residuals)\n model_output |&gt; head()\n\n  score_hat  residuals\n1  4.213523  0.4864769\n2  4.213523 -0.1135231\n3  4.213523 -0.3135231\n4  4.213523  0.5864769\n5  4.080249  0.5197509\n6  4.080249  0.2197509"
  },
  {
    "objectID": "index.html#assessing-model-fit",
    "href": "index.html#assessing-model-fit",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n3.4 Assessing model fit",
    "text": "3.4 Assessing model fit\nWhen we fit a simple linear regression model there are five main assumptions that we need to hold true in order for the model to be an appropriate fit to the data. These assumptions are:\n\nThe deterministic part of the model captures all the non-random structure in the data, i.e. the residuals have mean zero.\nThe scale of the variability of the residuals is constant at all values of the explanatory variables (homoscedasticity).\nThe residuals are normally distributed.\nThe residuals are independent.\nThe values of the explanatory variables are recorded without error.\n\nOne way we can check our first assumption is to plot the residuals (residuals) against the explanatory variable (bty_avg). From this we should be able to check that the explanatory variable has a linear relationship with the outcome variable (score). We can plot the residuals against our explanatory variable using:\n\nCodeggplot(regression.points, aes(x = bty_avg, y = residual)) +\n  geom_point() +\n  labs(x = \"Beauty Score\", y = \"Residual\") +\n  geom_hline(yintercept = 0, col = \"blue\", linewidth = 1)\n\n\n\nResiduals against beauty score.\n\n\n\nIdeally, for the first assumption to hold we should observe the following:\n\nThere should be no systematic pattern, i.e. the residuals should appear randomly scattered.\nThe residuals should have mean zero. That is, they should be evenly scattered above and below the zero line. This is because the regression model will overestimate some of the fitted values, but it will also underestimate some, and hence, on average, they should even out to have mean zero.\n\nWe can examine our first two assumptions by also plotting the residuals against the fitted values as follows:\n\nCodeggplot(regression.points, aes(x = score_hat, y = residual)) +\n  geom_point() +\n  labs(x = \"Fitted values\", y = \"Residual\") +\n  geom_hline(yintercept = 0, col = \"blue\", linewidth = 1)\n\n\n\nResiduals against fitted values.\n\n\n\nFrom the plot of the residuals against the fitted values we want to examine whether:\n\nThe residuals have mean zero.\nIf the residuals have constant variance across all levels of the fitted values. That is, the range (or spread) of the residuals should be similar across all levels of the fitted values and display no obvious changes in variability.\n\nTo assess our third assumption that the residuals are normally distributed we can simply plot a histogram of the residuals:\n\nCodeggplot(regression.points, aes(x = residual)) +\n  geom_histogram(binwidth = 0.25, color = \"white\") +\n  labs(x = \"Residual\")\n\n\n\nHistogram of residuals.\n\n\n\nIdeally, for the assumption of normally distributed residuals, the histogram should be bell-shaped and centred at zero, i.e. the residuals have mean zero. However, in practice this will almost never be the case, and as such, like the plots of the residuals, there is some subjectivity in whether you believe the assumptions hold. For instance, here we can see that the histogram is slightly skewed to the left in that the distribution has a longer tail to the left. However, in my opinion, this is not of much concern as the histogram appears to be relatively symmetrical and bell-shaped, and as such the assumption of normally distributed random errors appears valid in this case.\nFinally, assumptions 4. and 5. are often justified on the basis of the experimental context and are not formally examined."
  },
  {
    "objectID": "index.html#exploratory-data-analysis-1",
    "href": "index.html#exploratory-data-analysis-1",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n4.1 Exploratory data analysis",
    "text": "4.1 Exploratory data analysis\nLet’s examine a subset of the gapminder data set relating to the year 2007. That is, we use the filter function to choose only the observations pertaining to 2007, and then select the variables we are interested in:\n\nCodegapminder2007 &lt;- gapminder |&gt;\n  dplyr::filter(year == 2007) |&gt; \n  select(country, continent, lifeExp)\n\n\nThe new data set can be examined using either the View or glimpse functions, i.e.\n\nCodeglimpse(gapminder2007)\n\nRows: 142\nColumns: 3\n$ country   &lt;fct&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", …\n$ continent &lt;fct&gt; Asia, Europe, Africa, Africa, Americas, Oceania, Europe, Asi…\n$ lifeExp   &lt;dbl&gt; 43.828, 76.423, 72.301, 42.731, 75.320, 81.235, 79.829, 75.6…\n\n\nHere, we can see that both country and continent are factors (fct), which is how R stores categorical variables. Similarly to our previous exploratory data analysis, we can obtain summary statistics using the skim function. First, let’s take a look at the life expectancy (lifeExp) and continent variables:\n\nCodegapminder2007 |&gt; \n  select(continent, lifeExp) |&gt; \n  skim()\n\n\nData summary\n\n\nName\nselect(gapminder2007, con…\n\n\nNumber of rows\n142\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\ncontinent\n0\n1\nFALSE\n5\nAfr: 52, Asi: 33, Eur: 30, Ame: 25\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\nlifeExp\n0\n1\n67.01\n12.07\n39.61\n57.16\n71.94\n76.41\n82.6\n▂▃▃▆▇\n\n\n\n\nThe summary output for the numerical outcome variable lifeExp is the same as we have seen previously. However, for the categorical variable continent we obtain:\n\n\nn_unique: the number of levels (or categories) of the variable, i.e. the number of continents.\n\ntop_counts: the top counts from the top categories.\n\nordered: whether the variable is ordinal or not. That is, whether or not the ordering of the categories matter.\n\nWe can summarise any differences in life expectancy by continent by taking a look at the median and mean life expectancies of each continent using the summarize functions as follows:\n\nCodelifeExp.continent &lt;- gapminder2007 |&gt;\n  summarize(median = median(lifeExp), mean = mean(lifeExp),.by = continent)\n\n# A tibble: 5 × 3\n  continent median  mean\n  &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Asia        72.4  70.7\n2 Europe      78.6  77.6\n3 Africa      52.9  54.8\n4 Americas    72.9  73.6\n5 Oceania     80.7  80.7\n\n\nBoxplots are often used when examining the distribution of a numerical outcome variable across different levels of a categorical variable:\n\nCodeggplot(gapminder2007, aes(x = continent, y = lifeExp)) +\n  geom_boxplot() +\n  labs(x = \"Continent\", y = \"Life expectancy (years)\", \n       title = \"Life expectancy by continent\")\n\n\n\nLife expectancy by continent in 2007.\n\n\n\nHere, we can see that the middle 50% of the life expectancy distribution of Africa is much smaller than, and does not overlap with, the middle 50% of the remaining four continents, while the country with the highest life expectancy in Africa is less than all countries in Oceania. Speaking of Oceania, there is almost no variability (or spread) in life expectancy in this continent, however that may well be because it consists of only two countries (Australia and New Zealand). There is more variability in life expectancy in the continents of Africa and Asia."
  },
  {
    "objectID": "index.html#formal-analysis-1",
    "href": "index.html#formal-analysis-1",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n4.2 Formal analysis",
    "text": "4.2 Formal analysis\nWhen examining the relationship between a numerical outcome variable \\(y\\) and a categorical explanatory variable \\(x\\), we are not just looking to find the best-fitting line to the data as before, but are examining relative differences to a baseline category. For example, the table below displays the mean life expectancy of each continent, as well as the differences between the means of each continent and Africa. Now, in comparison with Africa we can see that the mean life expectancy of the other continents is around 18-26 years greater than that of Africa.\n\n\n\n\ncontinent\nmean\nmean vs Africa\n\n\n\nAfrica\n54.81\n0.00\n\n\nAmericas\n73.61\n18.80\n\n\nAsia\n70.73\n15.92\n\n\nEurope\n77.65\n22.84\n\n\nOceania\n80.72\n25.91\n\n\n\n\n\nNow let us fit our regression model to the data, where lifeExp is our outcome variable \\(y\\) and continent is our categorical explanatory variable \\(x\\):\n\nCodelifeExp.model &lt;- linear_reg() |&gt;\n  fit(lifeExp ~ continent, data = gapminder2007)\n\n\n\n\n# A tibble: 5 × 5\n  term              estimate std.error statistic  p.value\n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)           54.8      1.03     53.4  1.23e-93\n2 continentAmericas     18.8      1.80     10.4  3.74e-19\n3 continentAsia         15.9      1.65      9.67 3.41e-17\n4 continentEurope       22.8      1.70     13.5  7.10e-27\n5 continentOceania      25.9      5.33      4.86 3.12e- 6\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor now we will ignore the last three columns of the regression table and only focus on the estimate column.\n\n\nWe obtain five estimates: the intercept term and four others relating to the continents (continentAmericas, continentAsia, continentEurope and continentOceania), such that our regression equation is given as:\n\\[\\widehat{\\mbox{life exp}} = \\widehat{\\alpha} + \\widehat{\\beta}_{\\mbox{Amer}} \\cdot \\mathbb{I}_{\\mbox{Amer}}(x) + \\widehat{\\beta}_{\\mbox{Asia}} \\cdot \\mathbb{I}_{\\mbox{Asia}}(x) + \\widehat{\\beta}_{\\mbox{Euro}} \\cdot \\mathbb{I}_{\\mbox{Euro}}(x) + \\widehat{\\beta}_{\\mbox{Ocean}} \\cdot \\mathbb{I}_{\\mbox{Ocean}}(x),\\] where\n\nthe intercept \\(\\widehat{\\alpha}\\) is the mean life expectancy for our baseline category Africa;\n\\(\\widehat{\\beta}_{\\mbox{continent}}\\) is the difference in the mean life expectancy of a given continent relative to the baseline category Africa; and\n\n\\(\\mathbb{I}_{\\mbox{continent}}(x)\\) is an indicator function such that\n\\[\\mathbb{I}_{\\mbox{continent}}(x)=\\left\\{\n            \\begin{array}{ll}\n              1 ~~~ \\mbox{if country} ~ x ~ \\mbox{is in the continent},\\\\\n              0 ~~~ \\mbox{Otherwise}.\\\\\n            \\end{array}\n          \\right.\\]\n\n\nEssentially, the estimates for each continent are known as offsets relative to the baseline category (Africa in this case). For example, the mean life expectancy for Africa is simply equal to the intercept term \\(\\widehat{\\alpha} = 54.8\\). However, the mean life expectancy for Asia is:\n\\[\\widehat{\\alpha} + \\widehat{\\beta}_{\\mbox{Asia}} \\cdot \\mathbb{I}_{\\mbox{Asia}}(x) = 54.8 + 15.9 \\cdot 1 = 70.7 \\]\nIf we just look at a \\(\\widehat{\\beta}_{\\mbox{continent}}\\) on their own, then we would interpret these coefficients in relative terms with respect to the baseline category. E.g., looking at \\(\\widehat{\\beta}_{\\mbox{Asia}}=15.9\\) , we would say that the life expectancy in Asia is on average 15.9 years greater than in Africa."
  },
  {
    "objectID": "index.html#assessing-model-fit-1",
    "href": "index.html#assessing-model-fit-1",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n4.3 Assessing model fit",
    "text": "4.3 Assessing model fit\nWhat do the fitted values \\(\\widehat{y}\\) and the residuals \\(y - \\widehat{y}\\) correspond to when we are dealing with a categorical explanatory variable? Let’s explore the gapminder2007 data set in order to understand how they work.\n\n\n# A tibble: 142 × 3\n   country     continent lifeExp\n   &lt;fct&gt;       &lt;fct&gt;       &lt;dbl&gt;\n 1 Afghanistan Asia         43.8\n 2 Albania     Europe       76.4\n 3 Algeria     Africa       72.3\n 4 Angola      Africa       42.7\n 5 Argentina   Americas     75.3\n 6 Australia   Oceania      81.2\n 7 Austria     Europe       79.8\n 8 Bahrain     Asia         75.6\n 9 Bangladesh  Asia         64.1\n10 Belgium     Europe       79.4\n# ℹ 132 more rows\n\n\nHere, we see the life expectancy of each country and the continent they are from. For example, let’s remember the life expectancies of Afghanistan (43.8) and Bahrain (75.6). Now, we can obtain the fitted values and residuals in the same way we did previously:\n\nCoderegression_points &lt;- get_regression_points(lifeExp.model$fit)\n\n# A tibble: 142 × 5\n      ID lifeExp continent lifeExp_hat residual\n   &lt;int&gt;   &lt;dbl&gt; &lt;fct&gt;           &lt;dbl&gt;    &lt;dbl&gt;\n 1     1    43.8 Asia             70.7  -26.9  \n 2     2    76.4 Europe           77.6   -1.23 \n 3     3    72.3 Africa           54.8   17.5  \n 4     4    42.7 Africa           54.8  -12.1  \n 5     5    75.3 Americas         73.6    1.71 \n 6     6    81.2 Oceania          80.7    0.516\n 7     7    79.8 Europe           77.6    2.18 \n 8     8    75.6 Asia             70.7    4.91 \n 9     9    64.1 Asia             70.7   -6.67 \n10    10    79.4 Europe           77.6    1.79 \n# ℹ 132 more rows\n\n\nThe first row of the regression table corresponds to the observed life expectancy (lifeExp), fitted value (lifeExp_hat) and the residual error (residual) for Afghanistan. Here, we see that the fitted value (lifeExp_hat = 70.7) is much greater than the life expectancy of Afghanistan (lifeExp = 43.8) with a residual = -26.9. Now, for Bahrain (ID = 8) we also have the same fitted value (lifeExp_hat = 70.7). This is because the fitted values for each country correspond to the mean life expectancy for that continent. Hence, all countries in Africa have the fitted value lifeExp_hat = 70.7, while all countries in Europe have the fitted value lifeExp_hat = 77.6. The residual error in this case is then how much a country deviates from the mean life expectancy of its respective continent.\nFor assessing the assumptions surrounding the residuals for a categorical explanatory variable, we can plot the residuals for each continent:\n\nCodeggplot(regression_points, aes(x = continent, y = residual)) +\n  geom_jitter(width = 0.1) + \n  labs(x = \"Continent\", y = \"Residual\") +\n  geom_hline(yintercept = 0, col = \"blue\")\n\n\n\nResiduals over continent.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe have jittered the points for each continent in order to see the residuals for each country more clearly.\n\n\nHere, we see that there is an even spread of the residuals above and below the zero line for each continent, and hence our assumption that the residuals have mean zero appears valid. There is an outlier observed for Asia with a large negative residual (relating to Afghanistan).\n\n\n\n\n\n\n Question\n\n\n\nWhat about the homoscedasticity assumption, is it valid?\n\nyes, residuals are not heteroscedasticno, there is an unbalanced number of residuals per countryyes, residuals show an even spread across countriesno, the spread of the residuals is not even across countries\n\n\n\nTo check that the residual errors are normally distributed, we plot a histogram of them:\n\nCodeggplot(regression_points, aes(x = residual)) +\n  geom_histogram(binwidth = 5, color = \"white\") +\n  labs(x = \"Residual\")\n\n\n\nHistogram of residuals."
  },
  {
    "objectID": "index.html#exploratory-data-analysis-2",
    "href": "index.html#exploratory-data-analysis-2",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n5.1 Exploratory data analysis",
    "text": "5.1 Exploratory data analysis\n\n\n\n\n\n\nTask\n\n\n\nStart by subsetting the Credit data set so that we only have the variables we are interested in, that is, Balance, Limit and Income. Note, it is best to give your new data set a different name than Credit as to not overwrite the original Credit data set. Define a new data set named Cred containing only the aforementioned variables.\n\n\nTake a hint\n\nYou can use the select function from the dplyr package to select different variables in a data frame.\n\n\n\n\nClick here to see the solution\n\nCodeCred = Credit |&gt;\n  select(c(Balance,Limit,Income))\n\n\n\n\n\nke a look at summary statistics relating to our newly created data set using the skim function:\n\nCodeCred |&gt;\n  skim()\n\n\nData summary\n\n\nName\nCred\n\n\nNumber of rows\n400\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nBalance\n0\n1\n520.02\n459.76\n0.00\n68.75\n459.50\n863.00\n1999.00\n▇▅▃▂▁\n\n\nLimit\n0\n1\n4735.60\n2308.20\n855.00\n3088.00\n4622.50\n5872.75\n13913.00\n▆▇▃▁▁\n\n\nIncome\n0\n1\n45.22\n35.24\n10.35\n21.01\n33.12\n57.47\n186.63\n▇▂▁▁▁\n\n\n\n\n\nNow that we are looking at the relationship between an outcome variable and multiple explanatory variables, we need to examine the correlation between each of them. We can examine the correlation between Balance, Limit and Income by creating a table of correlations as follows:\n\nCodeCred |&gt;\n  cor()\n\n          Balance     Limit    Income\nBalance 1.0000000 0.8616973 0.4636565\nLimit   0.8616973 1.0000000 0.7920883\nIncome  0.4636565 0.7920883 1.0000000\n\n\n\n\n\n\n\n\n Question\n\n\n\nWhy are the diagonal components of our correlation table all equal to 1?\n\nbecause variables have been standardized to have an unit variancebecause they are the correlation of a column with itselfbecause we have a diagonal covariance-variance matrix\n\n\n\nFrom our correlation table we can see that the correlation between our two explanatory variables is 0.792, which is a strong positive linear relationship. Hence, we say there is a high degree of collinearity between our explanatory variables.\nCollinearity (or multicollinearity) occurs when an explanatory variable within a multiple regression model can be linearly predicted from the other explanatory variables with a high level of accuracy. For example, in this case, since Limit and Income are highly correlated, we could take a good guess as to an individual’s Income based on their Limit. That is, having one or more highly correlated explanatory variables within a multiple regression model essentially provides us with redundant information. Normally, we would remove one of the highly correlated explanatory variables, however, for the purpose of this example we shall ignore the potential issue of collinearity and carry on. You may want to use the pairs function or the ggpairs function from the GGally package to look at potential relationships between all of the variables within a data set.\n\n\n\n\n\n\nNote\n\n\n\nWhen we have several potential explanatory variables a model selection technique can help to identify which explanatory variables are significant predictors (in addition to the others) and which variables should be removed from the model. One procedure that can be used is stepwise regression, which implements an automatic procedure for choosing which explanatory variables should be included within the final model. A common stepwise procedure compares models using the model fit criterion Akaike Information Criterion (AIC) and can be implemented in R using the stepAIC function from the MASS library. This procedure allows for forward selection and backward selection (or both), where forward selection starts with the simplest model before iteratively including one explanatory variable at a time until the AIC reaches a minimum. The backward selection approach starts with the most complex model before removing one explanatory variable at a time until the minimium AIC is achieved. We will cover more of this in the next session.\n\n\nLet’s now produce scatterplots of the relationship between the outcome variable and the explanatory variables. First, we shall look at the scatterplot of Balance against Limit:\n\nCodeggplot(Cred, aes(x = Limit, y = Balance)) +\n  geom_point() +\n  labs(x = \"Credit limit (in $)\", y = \"Credit card balance (in $)\", \n       title = \"Relationship between balance and credit limit\") +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\nRelationship between balance and credit limit.\n\n\n\nNow, let’s look at a scatterplot of Balance and Income:\n\nCodeggplot(Cred, aes(x = Income, y = Balance)) +\n  geom_point() +\n  labs(x = \"Income (in $1000)\", y = \"Credit card balance (in $)\", \n       title = \"Relationship between balance and income\") +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\nRelationship between balance and income.\n\n\n\nThe two scatterplots above focus on the relationship between the outcome variable Balance and each of the explanatory variables independently. In order to get an idea of the relationship between all three variables we can use the plot_ly function within the plotly library to plot a 3-dimensional scatterplot as follows:\n\nCodelibrary(plotly)\nplot_ly(Cred, x = ~Income, y = ~Limit, z = ~Balance,\n        type = \"scatter3d\", mode = \"markers\")\n\n\nWhen we fitting our regression model with just a single covariate we looked at the best-fitting line. However, now that we have more than one explanatory variable, we are looking at the best-fitting plane, which is a 3-dimensional generalisation of the best-fitting line."
  },
  {
    "objectID": "index.html#formal-analysis-2",
    "href": "index.html#formal-analysis-2",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n5.2 Formal analysis",
    "text": "5.2 Formal analysis\nThe multiple regression model we will be fitting to the credit balance data is given as:\n\\[y_i = \\alpha + \\beta_1 x_{1i} + \\beta_2 x_{2i} + \\epsilon_i, ~~~~ \\epsilon \\sim N(0, \\sigma^2),\\]\nwhere\n\n\n\\(y_i\\) is the balance of the \\(i^{th}\\) individual;\n\n\\(\\alpha\\) is the intercept and positions the best-fitting plane in 3D space;\n\n\\(\\beta_1\\) is the coefficient for the first explanatory variable \\(x_1\\);\n\n\\(\\beta_2\\) is the coefficient for the second explanatory variable \\(x_2\\); and\n\n\\(\\epsilon_i\\) is the \\(i^{th}\\) random error component.\n\nSimilarly to a simple linear regression, we use the lm function to fit the regression model and the tidy function to view our parameter estimates:\n\nCodeBalance.model &lt;- linear_reg()  |&gt;  fit(Balance ~ Limit + Income, data = Cred)\ntidy(Balance.model$fit)\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept) -385.     19.5         -19.8 3.88e- 61\n2 Limit          0.264   0.00588      45.0 7.72e-158\n3 Income        -7.66    0.385       -19.9 1.26e- 61\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo include multiple explanatory variables within a regression model we simply use the + sign, that is Balance ~ Limit + Income.\n\n\nHow do we interpret our model estimates defining the regression plane? They can be interpreted as follows:\n\nThe intercept represents the credit card balance (Balance) of an individual who has $0 for both credit limit (Limit) and income (Income). However, the interpretation of the intercept in this case is somewhat limited as there are no individuals with $0 credit limit and income in the data set, with the smallest credit card balance being $0.\nThe coefficient for credit limit (Limit) tells us that, taking all other variables in the model into account, that there is an associated increase, on average, in credit card balance of $0.26.\nSimilarly, the coefficient for income (Income) tells us that, taking all other variables in the model into account, that there is an associated decrease, on average, in credit card balance of $7.66.\n\nWhat do you notice that is strange about our coefficient estimates given our exploratory data analysis? Well, from our scatterplots of credit card balance against both credit limit and income, we seen that there appeared to be a positive linear relationship. Then, why do we then get a negative coefficient for income (-7.66)? This is due to a phenomenon known as Simpson’s Paradox. This occurs when there are trends within different categories (or groups) of data, but that these trends disappear when the categories are grouped as a whole. For more details see Section 7.3.2 of An Introduction to Statistical and Data Sciences in R."
  },
  {
    "objectID": "index.html#assessing-model-fit-for-multiple-regression",
    "href": "index.html#assessing-model-fit-for-multiple-regression",
    "title": "Week 3: Regression modelling part 1",
    "section": "\n5.3 Assessing model fit for multiple regression",
    "text": "5.3 Assessing model fit for multiple regression\nNow we need to assess our model assumptions. Similarly to simple regression, our model assumptions are:\n\nThe deterministic part of the model captures all the non-random structure in the data, i.e. the residuals have mean zero.\nThe scale of the variability of the residuals is constant at all values of the explanatory variables.\nThe residuals are normally distributed.\nThe residuals are independent.\nThe values of the explanatory variables are recorded without error.\n\nFirst, we need to obtain the fitted values and residuals from our regression model:\n\nCoderegression.points &lt;- get_regression_points(Balance.model$fit)\n\n\nRecall that get_regression_points provides us with values of the:\n\noutcome variable \\(y\\) (Balance);\nexplanatory variables \\(x_1\\) (Limit) and \\(x_2\\) (Income);\nfitted values \\(\\widehat{y}\\); and\nthe residual error (\\(y - \\widehat{y}\\)).\n\nWe can assess our first two model assumptions by producing scatterplots of our residuals against each of our explanatory variables. First, let’s begin with the scatterplot of the residuals against credit limit:\n\nCodeggplot(regression.points, aes(x = Limit, y = residual)) +\n  geom_point() +\n  labs(x = \"Credit limit (in $)\", y = \"Residual\", title = \"Residuals vs credit limit\")  +\n  geom_hline(yintercept = 0, col = \"blue\", linewidth = 1)\n\n\n\nResiduals vs credit limit.\n\n\n\nNow, let’s plot a scatterplot of the residuals against income:\n\nCodeggplot(regression.points, aes(x = Income, y = residual)) +\n  geom_point() +\n  labs(x = \"Income (in $1000)\", y = \"Residual\", title = \"Residuals vs income\") +\n  geom_hline(yintercept = 0, col = \"blue\", linewidth = 1)\n\n\n\nResiduals vs income.\n\n\n\nWe can also call the function autoplot form the ggfortify library to produce the standard diagnostic plots for a fitted linear regression model:\n\nCodelibrary(ggfortify)\nautoplot(Balance.model$fit)\n\n\n\n\n\n\n\n\n\n\n Question\n\n\n\nWhich assumptions does each of the following plots address?"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Week 3 Tasks",
    "section": "",
    "text": "Tasks\n\nExamine the relationship between teaching score and age in the evals data set. What is the value of the correlation coefficient? How would you interpret this verbally? Finally, produce a scatterplot of teaching score and age.\n\n\n\n\n\n\n\n\n\n\n\nPerform a formal analysis of the relationship between teaching score and age by fitting a simple linear regression model. Superimpose your best-fitting line onto your scatterplot from Task 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssess the model assumptions from Task 2 by plotting the residuals against the explanatory variable and fitted values, respectively. Also, plot a histogram of the residuals to assess whether they are normally distributed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerform the same analysis we did on life expectancy from the gapminder data set in 2007. However, subset the data for the year 1997. Are there any differences in the results across this 10 year period?\n\n\n\n\n\n\n\n\n\n\n\nReturn to the Credit data set and fit a multiple regression model with Balance as the outcome variable, and Income and Age as the explanatory variables, respectively. Assess the assumptions of the multiple regression model."
  },
  {
    "objectID": "webexercises.html",
    "href": "webexercises.html",
    "title": "Webexercises",
    "section": "",
    "text": "This is a Web Exercise template created by the psychology teaching team at the University of Glasgow, based on ideas from Software Carpentry. This template shows how instructors can easily create interactive web documents that students can use in self-guided learning.\nThe {webexercises} package provides a number of functions that you use in inline R code or through code chunk options to create HTML widgets (text boxes, pull down menus, buttons that reveal hidden content). Examples are given below. Render this file to HTML to see how it works.\nNOTE: To use the widgets in the compiled HTML file, you need to have a JavaScript-enabled browser."
  },
  {
    "objectID": "webexercises.html#example-questions",
    "href": "webexercises.html#example-questions",
    "title": "Webexercises",
    "section": "Example Questions",
    "text": "Example Questions\n\nFill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 64 is: \n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\n\nMultiple Choice (mcq())\n\n“Never gonna give you up, never gonna: let you goturn you downrun awaylet you down”\n“I bless the rainsguess it rainssense the rain down in Africa” -Toto\n\n\n\nTrue or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). TRUEFALSE\n\n\n\nLonger MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n there is a 95% probability that the true mean lies within this range if you repeated the process many times, 95% of intervals calculated in this way contain the true mean 95% of the data fall within this range"
  },
  {
    "objectID": "webexercises.html#checked-sections",
    "href": "webexercises.html#checked-sections",
    "title": "Webexercises",
    "section": "Checked sections",
    "text": "Checked sections\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion"
  },
  {
    "objectID": "webexercises.html#hidden-solutions-and-hints",
    "href": "webexercises.html#hidden-solutions-and-hints",
    "title": "Webexercises",
    "section": "Hidden solutions and hints",
    "text": "Hidden solutions and hints\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  }
]