[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Collaborative Coding 2",
    "section": "",
    "text": "This week’s material is based on the Version Control Course from the School of Mathematics and Statistics from the University of Glasgow. The content has been reduced to fit the class structure. At the end this week, please provide some feedback on the materials on https://uofg.qualtrics.com/jfe/form/SV_56jF2LNgmA6qrhY."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Collaborative Coding 2",
    "section": "\n3.1 Introduction",
    "text": "3.1 Introduction\nTypically a project will have one main direction of development— to reach a predetermined goal, such as a fully working prototype or to complete a course assessment. When Git uses the analogy of a tree (with branches), this main direction could be thought of as the ‘trunk’ of your development flow.\nSo far, we have only committed changes to one branch, the default branch called main, which, in our tree analogy, can be thought of as the trunk. If you are working on your own, or with a small group and you are not all committing changes at the same time, this can be a valid approach and avoids a lot of complexity in using Git.\nBranches allow you to ‘branch off’ from the trunk in a new direction, which we may then add back to our trunk at a later time (see next paragraph). On this new branch, you can experiment with new ideas or work away in isolation, committing to Git and pushing your changes to GitHub, safe in the knowledge that nothing you do will affect the main direction of development. Likewise, the main direction of development on main can carry on in parallel with its own changes, and these will not affect your isolated branch.\nIt’s possible to merge the changes made in a branch, into another branch (usually the main branch). For example, if you created a branch to try out an experiment and the experiment was a success, Git enables you to merge those changes back into the main branch, or main direction of development, then you can delete your branch as it’s no longer needed. Or, if the experiment failed, you can leave the branch and never speak of it again, although it will still be stored if you decide later it is a good idea after all, or you can safely delete the branch.\nSimilarly, you can merge the changes from`main into your branch. This is useful if, for example, main has had updates made to it since you ‘branched off’, and you would like to see these updates in your branch.\nGit offers another method to merge branches called rebase, which is why the Git term for merging branches is integration as this covers both methods. Although rebase has some advantages, you can risk losing work when using it, so it won’t be covered in this course."
  },
  {
    "objectID": "index.html#motivation",
    "href": "index.html#motivation",
    "title": "Collaborative Coding 2",
    "section": "\n3.2 Motivation",
    "text": "3.2 Motivation\n\n3.2.1 Working with other people\nBranches enable a team to work on the same files at the same time. However, it doesn’t work like other collaboration tools like Google Docs or Microsoft 365, where you can see other users editing parts of a file as you work. Instead, branches allow collaborators to work in isolation, not worrying about what others are up to, and when the time comes to integrate changes into the default branch, Git provides the tools to ensure you don’t overwrite someone else’s work (or, if you do, you do it very intentionally!).\n\n\n3.2.2 Grouping commits\nEven if you’re working on your own, branches can be used as a tool to group multiple commits. For example, when working on a new feature for a project, you can create a branch named after your feature, then continue to use Git best practices by breaking your task into small manageable chunks, and complete one thing at a time and commit it. Then when it comes time to integrate your changes to the main branch, you can choose to “squash” those small commits down into one “merge commit” named after your new feature. This helps to keep the commit history on the default branch minimal and tidy, only showing completed tasks such as new features and bug fixes."
  },
  {
    "objectID": "index.html#create-a-new-local-git-repository",
    "href": "index.html#create-a-new-local-git-repository",
    "title": "Collaborative Coding 2",
    "section": "\n4.1 Create a new local Git repository",
    "text": "4.1 Create a new local Git repository\nLet’s create a new folder on our computer called ‘tutorial3’ and initialise Git:\n\n\nCommand-line\nGitHub Desktop\n\n\n\nCreate a directory for your ‘tutorial3’ work:\n\nmkdir tutorial3\ncd tutorial3\n\nand run git init inside:\n\ngit init\n\n\nInitialized empty Git repository in /Users/staff/Work/tutorial3/.git/\n\n\n\nChoose File &gt; New Repository... from the menu.\nIn the “Create a New Repository” form, name the repository “tutorial3”, set the “Local Path” field to your preferred location and click the “Create Repository” button:\n\n\n\n\nAdd the following file to the repository:\n\n\n\n\n\n\nexample.md\n\n\n\nHello\n\n\nThen add and commit the file:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit add example.md\ngit commit -m \"Add example.md\"\n\n\n\n\n\n\n\nNext, let’s create a branch named shout based on this commit.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nWe can create a new branch and switch to it using the switch command with the -c flag:\n\ngit switch -c shout\n\n\nSwitched to a new branch 'shout'\n\n\n\n\n\n\n\nAdd an exclamation mark to the end of the word within the example.md file:\n\n\n\n\n\n\nexample.md\n\n\n\nHello!\n\n\nThen commit the change:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit add example.md\n\n\ngit commit -m \"Add exclamation mark\"\n\n[shout eed4222] Add exclamation mark\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\nLet’s take a quick look at the log:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit log --all --decorate --oneline --graph\n\n\n* eed4222 (HEAD -&gt; shout) Add exclamation mark\n\n* 8f601cd (main) Add example.md\n\n\n\n\n\n\n\nNow let’s try merging the branch back into the main branch. First, switch back to main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit switch main\n\n\nSwitched to branch 'main'\n\n(Note, we don’t include the -c flag as this branch already exists)\n\n\n\n\n\n\nThen merge our shout branch into main:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit merge shout\n\n\nUpdating 8f601cd..eed4222\n\nFast-forward\n\nexample.md | 2 +-\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\n\nWe can check that the version of our file in the main branch now has the exclamation mark:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ncat example.md\n\n\nHello!\n\n\n\n\n\n\n\nAs the change is now reflected in our main branch, we can safely delete our shout branch:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit branch --delete shout\n\n\nDeleted branch shout (was eed4222).\n\n\n\nSimply right click on the shout branch here and select Delete"
  },
  {
    "objectID": "index.html#switching-branches-with-the-help-of-git-stash",
    "href": "index.html#switching-branches-with-the-help-of-git-stash",
    "title": "Collaborative Coding 2",
    "section": "\n4.2 Switching branches with the help of Git stash",
    "text": "4.2 Switching branches with the help of Git stash\nGiven the example above, branching with Git appears straightforward. However, this is not always the case. Sometimes Git won’t let you switch branches. Let’s create a scenario where we see an error when switching branches, try to understand why Git is stopping us, and look at a simple universal solution.\nCreate and switch to a new branch called question:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit switch -c question\n\n\nSwitched to a new branch 'question'\n\n\n\nFrom the main menu select Branch &gt; New Branch and name the branch ‘question’:\n\n\n\n\nLet’s make a change to the file by changing the exclamation mark to a question mark:\n\n\n\n\n\n\nexample.md\n\n\n\nHello?\n\n\nAdd the change to the stage and commit:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit add example.md\ngit commit -m \"Change exclamation mark to question mark\"\n\n[question 49806f4] Change exclamation mark to question mark\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\nNow let’s make another change to our file:\n\n\n\n\n\n\nexample.md\n\n\n\nHello?\nIs it me you’re looking for?\n\n\nThis time, instead of committing, we will try to switch back to the main branch, and Git will tell us we can’t switch branches currently as we would lose our local changes (see the next example for the error). Committing our latest change would let us then switch the branch, but what if we don’t want to commit the change?\n\n\nCommand-line\nGitHub Desktop\n\n\n\nA common scenario is that you have started working on a problem, then when you check Git you realise you are working on the wrong branch, but now you have uncommitted changes and can’t switch branches. For this scenario, there is the stash. Think of it as a clipboard with cut-and-paste functionality like you would have in a text editor, which will let us ‘cut’ our changes and store them somewhere safe, let us switch branches, and then paste them.\nLet’s try it now:\n\ngit switch main\n\n\nerror: Your local changes to the following files would be overwritten by checkout:\n\nexample.md\n\nPlease commit your changes or stash them before you switch branches.\n\nAborting\n\nGit complains that we will lose our local changes. Let’s try out the stash:\n\ngit stash\n\n\nSaved working directory and index state WIP on question: 49806f4 Change exclamation mark to question mark\n\nGit has used the abbreviation ‘WIP’ which stands for ‘Work In Progress’.\nNow if we look at our file we’ll see the 2nd line has disappeared:\n\ncat example.md\n\n\nHello?\n\nWe can ask Git to show us our stash:\n\ngit stash show\n\n\nexample.md | 2 ++\n\n1 file changed, 2 insertions(+)\n\nThis shows us which files have changed. We can add a -p (for ‘patch’) flag which will show us a diff:\n\ngit stash show -p\n\n\ndiff --git a/example.md b/example.md\n\nindex ebbc6cd..472b4c5 100644\n\n--- a/example.md\n\n+++ b/example.md\n\n@@ -1,2 +1,4 @@\n\nHello?\n\n+Is it me you're looking for?\n\n+\nNow our local copy is ‘clean’ and we can safely switch branches:\n\ngit switch main\n\nSwitched to branch 'main'\nAnd we can apply our change to a different branch:\n\ngit stash apply\n\n\nAuto-merging example.md\n\nOn branch main\n\nChanges not staged for commit:\n\n(use \"git add &lt;file&gt;...\" to update what will be committed)\n\n(use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\nmodified:   example.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nAnd now if we look at the file, we’ll see our stashed change has been applied, but there is no question mark on “Hello?” as this change still resides on the question branch:\n\ncat example.md\n\n\nHello!\n\nIs it me you're looking for?\n\nWe can now safely remove our stashed version:\n\ngit stash drop\n\n\nDropped refs/stash@{0} (00b8825ce0b6a0e3c2877f3c42c828fb4da4c922)\n\nIt’s important to drop the stash afterwards, or you’ll end up with several items in the stash that could lead to applying the wrong one. Git has a shortcut for ‘apply then drop’ which is git stash pop.\n\n\nLuckily for GitHub Desktop users, this stashing and stash-applying process is all handled by clicking a button.\nOnce we try to switch to the main branch:\n\nGitHub Desktop offers us two options:\n\nLeave my changes on question allows us to stash the changes and come back to the branch later and apply the stash\nBring my changes to main automates the process of stashing the changes, switching to the desired branch, and applying the stash.\n\nFor this tutorial, we will choose the latter option— ‘Bring my changes to main’:\n\nAnd now if we look at the file, we’ll see our stashed change has been applied, but no question mark as this change still resides on the question branch:\n\n\n\n\nLet’s stage and commit our 2nd line:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit add example.md\n\ngit commit -m \"Add 2nd line\"\n[main 6859b82] Add 2nd line\n1 file changed, 2 insertions(+)\n\n\n\n\n\n\nLet’s merge in the question mark.\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit merge question\n\n\nAuto-merging example.md\n\nMerge made by the 'ort' strategy.\n\nexample.md | 2 +-\n\n1 file changed, 1 insertion(+), 1 deletion(-)\n\n\n\n\n\n\n\nLet’s check the file:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ncat example.md\n\n\nHello?\n\nIs it me you're looking for?"
  },
  {
    "objectID": "index.html#merge-conflicts",
    "href": "index.html#merge-conflicts",
    "title": "Collaborative Coding 2",
    "section": "\n4.3 Merge conflicts",
    "text": "4.3 Merge conflicts\nIn the examples above we have introduced create a branch, making some changes and then integrating this back into main. However, what happens if you make a change to a line in a file on one branch, then you (or someone else) changes the same line of the same file on a different branch, what should Git do when you want to merge? This is a so-called merge conflict.\nIn this section, we’re going to create a simple scenario where we will run into merge conflicts and explore two different ways to resolve them.\nWhen using merge to combine two branches, Git will first find a common “base commit” between the two branches, then compare the changes since this commit and attempt to compile a change list known as a “merge commit”.\nGit tries to automate this process as much as possible, but if it finds two conflicting changes it won’t try to guess which change should overrule the other. This usually happens when the same line in a file has been changed in both branches. In this case, while attempting to compile the merge commit, Git will go into a “merge conflict” state, which involves updating the conflicting files in the filesystem (or “working tree”) with some special formatting to show you what it cannot guess, and Git will not allow you to commit the merge until you have manually decided what you want to happen.\nLet’s create a branch named capitalise and switch to it:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit switch -c capitalise\n\nSwitched to a new branch 'capitalise'\n\n\n\n\n\n\nNow we’re going to make a different change to the file on the main branch. This time change the contents to the following:\n\n\n\n\n\n\nexample.md\n\n\n\nHELLO\n\n\nThen commit the change:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit add example.md\ngit commit -m \"Capitalise example.md\"\n\n[capitalise 3da9dfb] Capitalise example.md\n\n1 file changed, 1 insertion(+), 3 deletions(-)\n\n\n\n\n\n\n\nNow switch back to the main branch:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit switch main\n\n\nSwitched to branch 'main'\n\n\n\n\n\n\n\nThe file should look like it did before the capitalisation, as that change is isolated on the capitalise branch:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ncat example.md\n\nHello?\n\nIs it me you're looking for?\n\n\n\n\n\n\nNow we’re going to make a different change to the file on the main branch. This time change the contents to the following:\n\n\n\n\n\n\nexample.md\n\n\n\nHello.\n\n\nStage and commit the change:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit add example.md\ngit commit -m \"Add full stop to end of the line in example.md\"\n\n[main 7888fef] Add full stop to end of the line in example.md\n\n1 file changed, 1 insertion(+), 3 deletions(-)\n\n\n\n\n\n\n\nLet’s see what happens when we try to merge:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit merge capitalise\n\nAuto-merging example.md\n\nCONFLICT (content): Merge conflict in example.md\n\nAutomatic merge failed; fix conflicts and then commit the result.\n\n\n\n\nLet’s see what happens when we try to merge:\n\nNext, GitHub Desktop will tell you which files need attention, and instruct you to open them in your preferred code editor.\n\nThe Continue Merge button is disabled, as we need to resolve the conflicts in our files.\n\n\n\nLet’s open up example.md in our preferred editor and see what is happening:\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n\nHello.\n\n=======\n\nHELLO\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; capitalise\n\nGit has modified our file to delineate a change that it cannot merge. The line (or lines) between &lt;&lt;&lt;&lt;&lt;&lt;&lt; and ====== here show what you already had (you can tell because HEAD points to your current branch). The line (or lines) between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; is what was introduced by the other commit, in this case from the capitalise branch.\nIf this was a large file with multiple lines changed, Git will automatically merge the parts that it can, and will highlight the parts it can’t like this, and we will have to go through each conflict and manually resolve them.\nLet’s have a look at Git’s status:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit status -v\n\n\nOn branch main\n\nYou have unmerged paths.\n\n(fix conflicts and run \"git commit\")\n\n(use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n\n(use \"git add &lt;file&gt;...\" to mark resolution)\n\nboth modified:   example.md\n\n* Unmerged path example.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\nNote that GitHub Desktop displays the conflict icon besides each file that needs attention:\n\n\n\n\nGit’s method for displaying merge conflicts by modifying the source files makes it very straightforward for us to resolve, by just manually editing the files as we want. However Git knows that there is now a danger that you could commit this merge conflict syntax, and when working with code, this will almost certainly cause a syntax error and break your project. So Git tries to protect us against this by going into a “merge conflict” state, where it wants you to either resolve or abort this action before you do anything else.\nLet’s manually edit our file to what we want, like a mixture of both changes:\n\n\n\n\n\n\nexample.md\n\n\n\nHELLO.\n\n\n\n\nCommand-line\nGitHub Desktop\n\n\n\nAdd the file to the stage to mark it as resolved:\n\ngit add example.md\n\nWe can see Git is no longer in a merge conflict state:\n\ngit status -v\n\n\nOn branch main\n\nAll conflicts fixed but you are still merging.\n\n(use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\nmodified:   example.md\n\ndiff --git a/example.md b/example.md\n\nindex 8b94e8e..c886167 100644\n\n--- a/example.md\n\n+++ b/example.md\n\n@@ -1,2 +1,2 @@\n\n-Hello.\n\n+HELLO.\n\n\n\nOnce the special &lt;&lt;&lt;&lt;&lt;&lt;&lt;, ====== and &gt;&gt;&gt;&gt;&gt;&gt;&gt; syntax is removed from our files, GitHub Desktop detects that our merge conflict has been resolved and allows us to ‘Continue Merge’:\n\n\n\n\nAnd we can conclude the merge.\n\n\nCommand-line\nGitHub Desktop\n\n\n\nI use the --no-edit flag to tell Git to use the default message for a merge commit:\n\ngit commit --no-edit\n\n\n[main fe2d762] Merge branch 'capitalise'\n\n\n\n\n\n\n\nWe have integrated our branch into the main branch and we can safely delete our short-lived branch capitalise:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit branch --delete capitalise\n\nDeleted branch capitalise (was 3da9dfb)."
  },
  {
    "objectID": "index.html#fork",
    "href": "index.html#fork",
    "title": "Collaborative Coding 2",
    "section": "\n6.1 Fork",
    "text": "6.1 Fork\nTo fork a GitHub repository, first, click the Fork button on the top right:\n\nThen you have the opportunity to give the forked repository a different name, description, and which branch to fork: \nAnd that’s it! You have a copy of the project under your name on GitHub:"
  },
  {
    "objectID": "index.html#clone-1",
    "href": "index.html#clone-1",
    "title": "Collaborative Coding 2",
    "section": "\n6.2 Clone",
    "text": "6.2 Clone\nNext, we’ll clone the project to our local machine:\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\n\nClick on the green button labelled “Code”\nChoose either HTTPS or SSH depending on your authentication setup and copy the URL Next, we can navigate to the folder we want and run the command:\n\n\ngit clone git@github.com:daviestar/tutorial2.git .\n\nCloning into '.'...\n\n\nIn GitHub Desktop, click on the ‘repository’ tab in the top-left of the window, then ‘Add’, then ‘Clone repository…’: \nChoose the ‘URL’ tab and enter dmca-glasgow/tutorial2 into the ‘Repository URL’ input box, choose where you’d like to store the repository on your computer, then finally click ‘Clone’:"
  },
  {
    "objectID": "index.html#make-some-changes",
    "href": "index.html#make-some-changes",
    "title": "Collaborative Coding 2",
    "section": "\n6.3 Make some changes",
    "text": "6.3 Make some changes\nLet’s add a new line to the readme.md file, making sure to save it:\n\n\n\n\n\n\nreadme.md\n\n\n\n## Follow along tutorial 2: Create a Pull Request to an existing project\nMy updated text."
  },
  {
    "objectID": "index.html#stage-commit-and-push-the-change-to-our-repository",
    "href": "index.html#stage-commit-and-push-the-change-to-our-repository",
    "title": "Collaborative Coding 2",
    "section": "\n6.4 Stage, commit and push the change to our repository",
    "text": "6.4 Stage, commit and push the change to our repository\n\n\nCommand-line\nGitHub Desktop\n\n\n\n\ngit add readme.md\ngit commit -m \"added my updated text to readme\"\ngit push\n\n[main 7d73c6c] added my updated text to readme\n1 file changed, 2 insertions(+)\nTo github.com:daviestar/tutorial2.git\nc9dfc4a..7d73c6c  main -&gt; main\n\n\nIn GitHub Desktop, add a descriptive message and click ‘Commit to main’:"
  },
  {
    "objectID": "index.html#create-a-pull-request",
    "href": "index.html#create-a-pull-request",
    "title": "Collaborative Coding 2",
    "section": "\n6.5 Create a Pull Request",
    "text": "6.5 Create a Pull Request\n\n\nNavigate to the original project repository\nClick on the Pull Requests tab\nClick on the green button with the label “New pull request”\n\n\n\nClick “compare across forks”\nSelect your repository from the “head” dropdown menu\nSee your commit message!\nSee the contents of your commit! Now you can click the green button with the label “Create pull request”.\n\n\nNow you have the opportunity to rename your Pull Request and give it a description. When you’re ready, you can click the green button with the label “Create pull request”.\nNote that you have the option to create a “Draft Pull Request”. This lets other users know that although you have opened a Pull Request, it’s not ready to review yet. This allows you the flexibility to set up the Pull Request before finalising the change. For example, you may want to make others aware that you are working on this particular change so they don’t start working on it too.\nThe “Draft Pull Request” feature is unfortunately only available on public repositories and some enterprise accounts. If you were hoping to use this workflow in a private repository, another convention is to put “WIP” (Work In Progress) at the top of your Pull Request description.\n\nNow we can see our Pull Request has been created. At this point, the project maintainers will be notified. There’s nothing else we can do now, as we don’t have permission to integrate this change ourselves, but we will be notified if there is any activity on the Pull Request."
  },
  {
    "objectID": "index.html#code-review",
    "href": "index.html#code-review",
    "title": "Collaborative Coding 2",
    "section": "\n6.6 Code review",
    "text": "6.6 Code review\nThe Pull Request page we have just created is where a project maintainer will perform a code review. As an extreme example, the reviewer has a duty to at least ensure someone isn’t submitting a virus to their project, so your code will be read and reviewed.\nFor the reviewer, this is a whole topic (or even course) on its own as Code Review can be such a powerful process. At its best, it can be an opportunity to spread knowledge and build relationships in a team while keeping the codebase standardised and robust. It’s just simply a good idea to have a 2nd set of eyes look over your code offering constructive criticism."
  },
  {
    "objectID": "slides/slides.html",
    "href": "slides/slides.html",
    "title": "Data Analysis",
    "section": "",
    "text": "By the end of this session you will be able to:\n\nLearn the basics about collaborative work using GitHub.\nCreating and deleting a Branch\nMerge conflicts\n“A better approach to resolving merge conflicts”\nBranching strategies"
  },
  {
    "objectID": "slides/slides.html#ilos",
    "href": "slides/slides.html#ilos",
    "title": "Data Analysis",
    "section": "ILOs",
    "text": "ILOs\nBy the end of this session you will be able to:\n\nLearn the basics about collaborative work using GitHub.\nBranching strategies\nCreating and deleting a Branch\nMerge conflicts\n“A better approach to resolving merge conflicts”"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Week Tasks",
    "section": "",
    "text": "1 Tasks"
  },
  {
    "objectID": "slides/slides.html#inviting-a-collaborator-to-a-personal-repository",
    "href": "slides/slides.html#inviting-a-collaborator-to-a-personal-repository",
    "title": "Data Analysis",
    "section": "Inviting a collaborator to a personal repository",
    "text": "Inviting a collaborator to a personal repository\n\n\nAsk for the username of the person you’re inviting as a collaborator (the user name they used when they sign up for GitHub)\nOn GitHub, navigate to the main page of the repository.\nUnder your repository name, click  Settings. If you cannot see the “Settings” tab, select the  dropdown menu, then click Settings.\n\nIn the “Access” section of the sidebar, click  Collaborators.\nClick Add people.\nIn the search field, start typing the name of person you want to invite, then click a name in the list of matches.\nClick *Add NAME to REPOSITORY.\nThe user will receive an email inviting them to the repository. Once they accept your invitation, they will have collaborator access to your repository."
  },
  {
    "objectID": "slides/slides.html#inviting-a-collaborator",
    "href": "slides/slides.html#inviting-a-collaborator",
    "title": "Data Analysis",
    "section": "Inviting a collaborator",
    "text": "Inviting a collaborator\n\n\nAsk for the username of the person you’re inviting as a collaborator (the user name they used when they sign up for GitHub)\nOn GitHub, navigate to the main page of the repository.\nUnder your repository name, click  Settings. If you cannot see the “Settings” tab, select the  dropdown menu, then click Settings.\n\nIn the “Access” section of the sidebar, click  Collaborators.\nClick Add people.\nIn the search field, start typing the name of person you want to invite, then click a name in the list of matches.\nClick Add NAME to REPOSITORY.\nThe user will receive an email inviting them to the repository. Once they accept your invitation, they will have collaborator access to your repository."
  },
  {
    "objectID": "slides/slides.html#cloning-a-project",
    "href": "slides/slides.html#cloning-a-project",
    "title": "Data Analysis",
    "section": "Cloning a project",
    "text": "Cloning a project\n\nClone is a Git feature that allows a user to make a copy of a repository, including all the associated metadata on their computer so they can work on it.\n\n\n\nTo do this you need to the URL of the repo you are trying to clone, and a location you want to put the cloned folder\n\n\nClick on the green button labelled ‘Code’\nClick on ‘Open with GitHub Desktop’ or copy the url"
  },
  {
    "objectID": "slides/slides.html#cloning-a-project-1",
    "href": "slides/slides.html#cloning-a-project-1",
    "title": "Data Analysis",
    "section": "Cloning a project",
    "text": "Cloning a project\n\nClone is a Git feature that allows a user to make a copy of a repository, including all the associated metadata on their computer so they can work on it.\n\n\n\nOpen GitHub Desktop and paste the URL of the repository on GitHub populated.\nChoose where you would like the repository to be cloned to on your computer (needs an empty folder)\nClick ‘Clone’"
  },
  {
    "objectID": "slides/slides.html#cloning-a-project-2",
    "href": "slides/slides.html#cloning-a-project-2",
    "title": "Data Analysis",
    "section": "Cloning a project",
    "text": "Cloning a project\nIf an update is made, then all you need to do is resynchronise your local repo with the GitHub version"
  },
  {
    "objectID": "slides/slides.html#branching-strategies",
    "href": "slides/slides.html#branching-strategies",
    "title": "Data Analysis",
    "section": "Branching strategies",
    "text": "Branching strategies\n\n\nUp until this point we have only committed changes to one branch -the default branch called main\n\n\n\n\n\n\n\nIf you are working on your own this can be a valid approach and avoids a lot of complexity in using Git.\nBranches represents a distinct version of the main repository and enable a team to work on the same files at the same time.\n\n\n\n\n\n\n\nUnlike Google Docs where you can track live changes, branches allow collaborators to work in isolation, not worrying about what others are up to, and when the time comes, integrate your changes into the default branch."
  },
  {
    "objectID": "slides/slides.html#branching-strategies-1",
    "href": "slides/slides.html#branching-strategies-1",
    "title": "Data Analysis",
    "section": "Branching strategies",
    "text": "Branching strategies\nThis week we are going to learn how to create a branch and make changes to it, then integrate this branch back into the main branch. This is particularly helpful when working collaboratively.\n\nIn Git, a branch represents a distinct version of the main repository, serving as a snapshot of your changes.\nWhen implementing new features or addressing issues, creating a new branch is the practice to isolate your modifications. \nWhen the work is complete, a branch can be merged with the main project."
  },
  {
    "objectID": "slides/slides.html#creating-a-new-branch",
    "href": "slides/slides.html#creating-a-new-branch",
    "title": "Data Analysis",
    "section": "Creating a new branch",
    "text": "Creating a new branch\nLets start a simple example by creating a new repo."
  },
  {
    "objectID": "slides/slides.html#creating-a-new-branch-1",
    "href": "slides/slides.html#creating-a-new-branch-1",
    "title": "Data Analysis",
    "section": "Creating a new branch",
    "text": "Creating a new branch\nLets start a simple example by creating a new repo.\n\nWe begin with a single commit with the following content"
  },
  {
    "objectID": "slides/slides.html#creating-a-new-branch-2",
    "href": "slides/slides.html#creating-a-new-branch-2",
    "title": "Data Analysis",
    "section": "Creating a new branch",
    "text": "Creating a new branch\n\nNow commit this change to git"
  },
  {
    "objectID": "slides/slides.html#working-on-a-branch",
    "href": "slides/slides.html#working-on-a-branch",
    "title": "Data Analysis",
    "section": "Working on a branch",
    "text": "Working on a branch\nLets modify the file by adding an explanation mark and commit the change!\n\n\n\n\n\n\nCheck the status of our shout branch:"
  },
  {
    "objectID": "slides/slides.html#working-on-a-branch-1",
    "href": "slides/slides.html#working-on-a-branch-1",
    "title": "Data Analysis",
    "section": "Working on a branch",
    "text": "Working on a branch\nOur new changes appear on the new branch of our local repo.\n\n\nNow we have made our change, we want to merge it back into the main branch"
  },
  {
    "objectID": "slides/slides.html#set-up-your-git",
    "href": "slides/slides.html#set-up-your-git",
    "title": "Data Analysis",
    "section": "Set up your Git",
    "text": "Set up your Git\n\nDon’t forget to invite JBelmont89 to watch your group projects.\nNo admin rights needed.\nDon’t forget to accept your colleagues’ invitations."
  },
  {
    "objectID": "slides/slides.html#cloning",
    "href": "slides/slides.html#cloning",
    "title": "Data Analysis",
    "section": "Cloning",
    "text": "Cloning\n\nThe colleagues who didn’t create the repo will have to clone it.\nOn GitDesktop go to File -&gt; Clone Repository and find the repository on you Github.com."
  },
  {
    "objectID": "slides/slides.html#expectations-for-group-project",
    "href": "slides/slides.html#expectations-for-group-project",
    "title": "Data Analysis",
    "section": "Expectations for group project",
    "text": "Expectations for group project\n\nAgree on a branching workflow – this will avoid confusion!\nExample of common rules:\n\nOne branch, one owner: Each branch is “owned” by a single team member. This means that team members should not switch to another team member’s branch and start committing changes, unless they’ve been invited for a review (this can be done verbally).\nLeave integration to the owner: Branches can only be merged by the owner. Possibly even after a successful review by other team members, since they’re the ones who know best when the task is complete.\n\nThis workflow allows each person to take ownership of their task.\nWe invite you to tell us about your shared rules: It shows you thought about them!"
  },
  {
    "objectID": "slides/slides.html#merge-and-copy-paste",
    "href": "slides/slides.html#merge-and-copy-paste",
    "title": "Data Analysis",
    "section": "Merge and copy & paste",
    "text": "Merge and copy & paste\n\nDo not copy and paste whole files saved on your machine instead of solving merge conflicts.\nThis is bad practice and you may end up dismissing your colleagues’ changes."
  },
  {
    "objectID": "slides/slides.html#working-on-a-branch-2",
    "href": "slides/slides.html#working-on-a-branch-2",
    "title": "Data Analysis",
    "section": "Working on a branch",
    "text": "Working on a branch\nOur new changes appear on the new branch of our local repo/\n\n\n\n\n\n\nNow we have made our change, we want to merge it back into the main branch\n\nswitch back to the main branch\nstart the ‘merge’\n\n\n ## Working on a branch {.smaller auto-animate=true}\nOur new changes appear on the new branch of our local repo/\n\n\n\n\n\n\nNow we have made our change, we want to merge it back into the main branch\n\nswitch back to the main branch\nstart the ‘merge’\nchoose the branch that we want to merge back in"
  },
  {
    "objectID": "slides/slides.html#working-on-a-branch-3",
    "href": "slides/slides.html#working-on-a-branch-3",
    "title": "Data Analysis",
    "section": "Working on a branch",
    "text": "Working on a branch\nOur new changes appear on the new branch of our local repo/\n\n\n\n\n\n\nNow we have made our change, we want to merge it back into the main branch\n\nswitch back to the main branch\nstart the ‘merge’\nchoose the branch that we want to merge back in\ncheck that the version of our file in the main branch now has the exclamation mark\n\n\n ## Working on a branch {.smaller auto-animate=true}\nOur new changes appear on the new branch of our local repo/\n\n\n\n\n\n\nNow we have made our change, we want to merge it back into the main branch\n\nswitch back to the main branch\nstart the ‘merge’\nchoose the branch that we want to merge back in\ncheck that the version of our file in the main branch now has the exclamation mark\ndelete shout branch"
  },
  {
    "objectID": "slides/slides.html#creating-a-new-branch-3",
    "href": "slides/slides.html#creating-a-new-branch-3",
    "title": "Data Analysis",
    "section": "Creating a new branch",
    "text": "Creating a new branch\n\nNext, let’s create a branch named shout based on this commit.\n\nYou do this be going to the main menu and selecting Branch &gt; New Branch"
  },
  {
    "objectID": "slides/slides.html#merging-a-branch-to-main",
    "href": "slides/slides.html#merging-a-branch-to-main",
    "title": "Data Analysis",
    "section": "Merging a branch to main",
    "text": "Merging a branch to main\n\nswitch back to the main branch"
  },
  {
    "objectID": "slides/slides.html#merging-a-branch-to-main-1",
    "href": "slides/slides.html#merging-a-branch-to-main-1",
    "title": "Data Analysis",
    "section": "Merging a branch to main",
    "text": "Merging a branch to main\n\nstart the ‘merge’"
  },
  {
    "objectID": "slides/slides.html#merging-a-branch-to-main-2",
    "href": "slides/slides.html#merging-a-branch-to-main-2",
    "title": "Data Analysis",
    "section": "Merging a branch to main",
    "text": "Merging a branch to main\n\nchoose the branch that we want to merge back in (i.e., shout)"
  },
  {
    "objectID": "slides/slides.html#merging-a-branch-to-main-3",
    "href": "slides/slides.html#merging-a-branch-to-main-3",
    "title": "Data Analysis",
    "section": "Merging a branch to main",
    "text": "Merging a branch to main\n\ncheck that the version of our file in the main branch now has the exclamation mark"
  },
  {
    "objectID": "slides/slides.html#merging-a-branch-to-main-4",
    "href": "slides/slides.html#merging-a-branch-to-main-4",
    "title": "Data Analysis",
    "section": "Merging a branch to main",
    "text": "Merging a branch to main\n\ndelete shout branch"
  },
  {
    "objectID": "slides/slides.html#merging-a-branch-to-main-5",
    "href": "slides/slides.html#merging-a-branch-to-main-5",
    "title": "Data Analysis",
    "section": "Merging a branch to main",
    "text": "Merging a branch to main\nOur current (local) work flow:\n\n\nNotice that the rejoining of the branches themselves then becomes a commit on the main branch, as this is the one we are updating."
  },
  {
    "objectID": "slides/slides.html#a-more-complex-example",
    "href": "slides/slides.html#a-more-complex-example",
    "title": "Data Analysis",
    "section": "A more complex example",
    "text": "A more complex example\n\nA slightly more complex situation occurs when we try to make change to two branches and then merge\nLet’s create a new branch converting the ! to a ?"
  },
  {
    "objectID": "slides/slides.html#a-more-complex-example-1",
    "href": "slides/slides.html#a-more-complex-example-1",
    "title": "Data Analysis",
    "section": "A more complex example",
    "text": "A more complex example\n\nSay we then update the file on question and get the following\n\n\n\nSwitching back to main then causes problems if you don’t commit your changes first!\nIf we switch branches without committing first will make us lose our local changes."
  },
  {
    "objectID": "slides/slides.html#a-more-complex-example-2",
    "href": "slides/slides.html#a-more-complex-example-2",
    "title": "Data Analysis",
    "section": "A more complex example",
    "text": "A more complex example\nIf we want to switch a branch before committing our changes the following dialog will appear:\n\nGitHub Desktop offers us two options:\n\nLeave my changes on question allows us to stash the changes (“save for later” kind of thing) and come back to the branch later and apply the stash.\nBring my changes to main automates the process of stashing the changes, switching to the desired branch, and applying the stash."
  },
  {
    "objectID": "slides/slides.html#a-more-complex-example-3",
    "href": "slides/slides.html#a-more-complex-example-3",
    "title": "Data Analysis",
    "section": "A more complex example",
    "text": "A more complex example\nIf we Bring my changes to main, this will automatically bring forward the changes we made in question to main.\n\nNow that we are on main, we only need to commit these changes:"
  },
  {
    "objectID": "slides/slides.html#recap",
    "href": "slides/slides.html#recap",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nLets re-cap what we have done so far.\n\nFirst, we created a example.md file in our main branch."
  },
  {
    "objectID": "slides/slides.html#recap-1",
    "href": "slides/slides.html#recap-1",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nLets re-cap what we have done so far.\n\nThen we created a shout branch and added an exclamation mark"
  },
  {
    "objectID": "slides/slides.html#recap-2",
    "href": "slides/slides.html#recap-2",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nLets re-cap what we have done so far.\n\nWe merged the shout branch into main"
  },
  {
    "objectID": "slides/slides.html#recap-3",
    "href": "slides/slides.html#recap-3",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nLets re-cap what we have done so far.\n\nCreate a question branch and changed the exclamation mark for a question mark"
  },
  {
    "objectID": "slides/slides.html#recap-4",
    "href": "slides/slides.html#recap-4",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nLets re-cap what we have done so far.\n\nAdd a second line to our file on the question branch without commit it. (This is equivalent to having unsaved changes in our file - see how our diagram has not changed)"
  },
  {
    "objectID": "slides/slides.html#recap-5",
    "href": "slides/slides.html#recap-5",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nLets re-cap what we have done so far.\n\nMerge the question branch into main while bringing my changes to main"
  },
  {
    "objectID": "slides/slides.html#recap-6",
    "href": "slides/slides.html#recap-6",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nLets re-cap what we have done so far.\n\nNow we save this changes into main (i.e., commit)"
  },
  {
    "objectID": "slides/slides.html#recap-7",
    "href": "slides/slides.html#recap-7",
    "title": "Data Analysis",
    "section": "Recap",
    "text": "Recap\nIf you follow these steps through, the your local Git should look like something this:\n\nThen, you can push this into GitHub and somebody else can pull these changes to their own machine."
  },
  {
    "objectID": "slides/slides.html#merge-conflicts",
    "href": "slides/slides.html#merge-conflicts",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nIn the last examples above we created a branch, made some changes and then integrated back into main.\nHowever, what happens if you make a change to a line in a file on one branch, then you (or someone else) changes the same line of the same file on a different branch, what should Git do when you want to merge?\nThis is a so-called merge conflict."
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-1",
    "href": "slides/slides.html#merge-conflicts-1",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nSuppose we create a new branch called capitalise and change the file to the following:"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-2",
    "href": "slides/slides.html#merge-conflicts-2",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nNow imagine switch to main (or someone else is working there already) and add a full stop and commits this change before merging branches:"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-3",
    "href": "slides/slides.html#merge-conflicts-3",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nWe have the following:"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-4",
    "href": "slides/slides.html#merge-conflicts-4",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nWe have the following:"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-5",
    "href": "slides/slides.html#merge-conflicts-5",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-6",
    "href": "slides/slides.html#merge-conflicts-6",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\n\nAt this point Git doesn’t know what to do and passes back to us to decide\nThere are two approaches to deciding / fixing the problem"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-7",
    "href": "slides/slides.html#merge-conflicts-7",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nWe can choose to press ahead with the merge, like we did before"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-8",
    "href": "slides/slides.html#merge-conflicts-8",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nGitHub Desktop will tell you which files need attention, and instruct you to open them in your preferred code editor.\n The Continue Merge button is disabled! as we need to resolve the conflicts in our files."
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-9",
    "href": "slides/slides.html#merge-conflicts-9",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nOpen up example.md in your preferred editor and see what is happening:\n\nThere is no automatic way of fixing this, so you will have to change it manually deleting the merge conflict syntax\n\n\n\nThe line(s) between \\(&lt;&lt;&lt;&lt;&lt;&lt;&lt;\\) and \\(======\\) here show what you already had.\nThe line(s) between \\(=======\\) and \\(&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\) is what was introduced by the other commit (in this case from the capitalise branch)."
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-10",
    "href": "slides/slides.html#merge-conflicts-10",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nLet’s manually edit our file to what we want, like a mixture of both changes."
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-11",
    "href": "slides/slides.html#merge-conflicts-11",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nOnce the special &lt;&lt;&lt;&lt;&lt;&lt;&lt;, ====== and &gt;&gt;&gt;&gt;&gt;&gt;&gt; syntax is removed from our files, GitHub Desktop detects that our merge conflict has been resolved and allows us to ‘Continue Merge’:"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-12",
    "href": "slides/slides.html#merge-conflicts-12",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nOnce the special &lt;&lt;&lt;&lt;&lt;&lt;&lt;, ====== and &gt;&gt;&gt;&gt;&gt;&gt;&gt; syntax is removed from our files, GitHub Desktop detects that our merge conflict has been resolved and allows us to ‘Continue Merge’:"
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach",
    "href": "slides/slides.html#an-alternative-approach",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nThere is a better way of doing it, that also demonstrates another use of branching\nLet’s assume we have got to the following conflict"
  },
  {
    "objectID": "slides/slides.html#merge-conflicts-13",
    "href": "slides/slides.html#merge-conflicts-13",
    "title": "Data Analysis",
    "section": "Merge Conflicts",
    "text": "Merge Conflicts\nThis is what we have done so far:"
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-1",
    "href": "slides/slides.html#an-alternative-approach-1",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nLet’s avoid dealing with our merge conflict on main and instead fix it on goodbye\nWe do this my merging main into goodbye\n\nHow?"
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-2",
    "href": "slides/slides.html#an-alternative-approach-2",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nswitch back to the goodbye branch."
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-3",
    "href": "slides/slides.html#an-alternative-approach-3",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nchoose main as our branch to merge into goodbye"
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-4",
    "href": "slides/slides.html#an-alternative-approach-4",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nAgain, we get a conflict, but this time in goodbye\n\nManually resolve it as before, this time with some Beatles lyrics in goodbye"
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-5",
    "href": "slides/slides.html#an-alternative-approach-5",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nGitHub Desktop has automatically detected that our merge conflict has been resolved:"
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-6",
    "href": "slides/slides.html#an-alternative-approach-6",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nSwitch back to main"
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-7",
    "href": "slides/slides.html#an-alternative-approach-7",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nOur change can be merged without a conflict."
  },
  {
    "objectID": "slides/slides.html#an-alternative-approach-8",
    "href": "slides/slides.html#an-alternative-approach-8",
    "title": "Data Analysis",
    "section": "An alternative approach",
    "text": "An alternative approach\n\nOur change can be merged without a conflict."
  },
  {
    "objectID": "slides/slides.html#re-cap-to-solve-conflicts",
    "href": "slides/slides.html#re-cap-to-solve-conflicts",
    "title": "Data Analysis",
    "section": "Re-cap to solve conflicts",
    "text": "Re-cap to solve conflicts\n\nWe have a merge-conflict"
  },
  {
    "objectID": "slides/slides.html#re-cap-to-solve-conflicts-1",
    "href": "slides/slides.html#re-cap-to-solve-conflicts-1",
    "title": "Data Analysis",
    "section": "Re-cap to solve conflicts",
    "text": "Re-cap to solve conflicts\n\nWe have a merge-conflict\nWe switch to goodbye and merge main  goodbye after resolving the conflict."
  },
  {
    "objectID": "slides/slides.html#re-cap-to-solve-conflicts-2",
    "href": "slides/slides.html#re-cap-to-solve-conflicts-2",
    "title": "Data Analysis",
    "section": "Re-cap to solve conflicts",
    "text": "Re-cap to solve conflicts\n\nWe have a merge-conflict\nWe switch to goodbye and merge main  goodbye after resolving the conflict.\nWe switch back to main and merge back goodbye  main."
  }
]