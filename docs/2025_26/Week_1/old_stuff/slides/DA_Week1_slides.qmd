---
title: "Week 1: Visualising data using R"
format: 
  revealjs: 
    multiplex: true
    embed-resources: true
editor: visual
execute: 
  echo: true
editor_options: 
  chunk_output_type: console
---

# Getting started {#smaller}

This week we will demonstrate various techniques for visualising data in R using `ggplot2`. This will also include the correct interpretation and understanding of the different plotting techniques.

## Load libraries {.smaller}

We shall now load into R all of the libraries we will need for this session. This can be done by typing the following into your R script:

```{r}
#| message: false
#| warning: false
library(ggplot2)
library(nycflights13)
```

1.  The first library `ggplot2` allows us to use functions within that package in order to create nicer data visualisations.
2.  The second library `nycflights13` contains data on flights from New York City in 2013 that we shall be examining.

## Viewing the data {.smaller}

Before visualising any data set, we first need to know its contents. For example, the contents of the `flights` data within the `nycflights13` library can be observed using the following command:

```{r}
head(flights, n = 3)
```

To reduce the amount of data we will be working with and make things a little easier, let's only look at *Alaska Airlines* flights leaving from New York City in 2013.

```{r alaska, echo = TRUE, eval = TRUE}
Alaska <- flights[flights$carrier == "AS", ]
```

## Scatterplots

```{r}
#| code-line-numbers: "|1|2|3|4|5"
#| output-location: slide
ggplot(data = Alaska, # <1>
       mapping = aes(x = dep_delay, y = arr_delay)) + # <2>
  geom_point() + # <3>
  labs(x = "Departure delay (minutes)", y = "Arrival delay (minutes)", #<4>
       title = "Alaska Airlines flights leaving NYC in 2013")  #<4>
```

A layer combines data, aesthetic mapping, a geom (geometric object), a stat (statistical transformation), and a position adjustment.

```{r}
#| echo: true
#| eval: false
ggplot(data,aes(x,y)) +
  layer(
  mapping = NULL, 
  data = NULL,
  geom = "point", geom_params = list(),
  stat = "identity", stat_params = list(),
  position = "identity"
)
```

## Histograms {.smaller}

Histograms allow us to look at the *statistical distribution* of a variable. They show us how many values of a variable fall within specified *bins*.

Here, let's take a look at the `weather` data set that is within the `nycflights13` library. This data set contains hourly weather data from three airports (LGA, JFK and EWR) in New York City in 2013.

```{r weather, echo = TRUE, eval = TRUE, warning = FALSE}
head(weather, n = 3)
```

## Histograms

```{r}
#| code-line-numbers: "|2"
#| fig-width: 3
#| fig-height: 3
#| output-location: column-fragment
ggplot(data = weather, aes(x = temp)) +
  geom_histogram(bins = 60,
                 fill = "skyblue")
```

```{r}
#| code-line-numbers: "|2"
#| fig-width: 3
#| fig-height: 3
#| output-location: column-fragment
ggplot(data = weather, aes(x = temp)) +
  geom_histogram(binwidth =  5, 
                 fill = "tomato")
```

## Boxplots

```{r}
#| fig-width: 6
#| fig-height: 4
#| fig-align: center
boxplot(weather$temp, ylab = "Hourly Temperature",
        main = "Hourly temperatures from NYC in 2013")
text(x= 1.35, y= summary(weather$temp)[1], labels= "Q1 - 1.5*IQR")
text(x= 1.35, y= summary(weather$temp)[2], labels= "Q1")
text(x= 1.35, y= summary(weather$temp)[3], labels= "Median")
text(x= 1.35, y= summary(weather$temp)[5], labels= "Q3")
text(x= 1.35, y= summary(weather$temp)[6], labels= "Q3 + 1.5*IQR")
```

-   the *interquartile range (IQR)*, that is, the height of the box (3rd - 1st quartiles)

## Boxplots

```{r}
#| code-line-numbers: "|1|2|3-4|5-6"
#| fig-width: 10
#| fig-align: center
#| output-location: fragment
#| 
ggplot(data = weather, aes(x = factor(month), y = temp)) +
  geom_boxplot(fill = "steelblue") +
  labs(x = "Month", y = "Temperature (Hourly)",
        title = "Hourly temperatures from NYC in 2013 by month")  +
  scale_x_discrete(labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
                              "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
```

## Barplots

Barplots, or barcharts, are used to visualise the distributions of categorical variables.

```{r barplots, echo = TRUE, eval = TRUE, warning = FALSE}
carrier.freq <- table(flights$carrier)
carrier.freq <- as.data.frame(carrier.freq)
colnames(carrier.freq) <- c("carrier", "number")
head(carrier.freq,n=6)
```

## Barplots {.smaller}

You can use two types of data sets to create barplots:

1.  data with variable(s) representing the categories

    ```{r}
    #| eval: false
    ggplot(flights, aes(y = carrier)) +  
      geom_bar()
    ```

`geom_bar()` by default counts the number of cases for each level of a categorical variable.

2.  variables representing the categories and the counts of each category

```{r}
#| eval: false 
ggplot(data = carrier.freq, aes(x = carrier, y = number)) +
  geom_col()
```

`geom_col()` expects a data set that already contains the count for each group

```{r}
#| echo: false
#| eval: false
#| output-location: slide
ggplot(data = carrier.freq, aes(x = carrier, y = number)) +
  geom_col()
```

## Barplots for two categorical variables {.smaller}

Example: Number of flights that flew out of New York City in 2013 from each carrier and from each airport (LGA, JFK and EWR).

```{r}
#| code-line-numbers: "|2|3-4"
#| output-location: fragment
ggplot(data = flights,
       aes(y = carrier,fill=origin)) +
  geom_bar()+
  coord_flip()
```

## Barplots: stacked vs side-by-side

```{r}
#| code-line-numbers: "3"
#| output-location: column
ggplot(data = flights,
       aes(y = carrier,fill=origin)) +
  geom_bar(position = 'dodge')+
  coord_flip()
```

```{r}
#| code-line-numbers: "3"
#| output-location: column
ggplot(data = flights,
       aes(y = carrier,fill=origin)) +
  geom_bar()+
  coord_flip()
```

-   What could be considered a positive of using a side-by-side barplot as opposed to a stacked barplot?

## Using Facets {.smaller}

Easier way to compare the carrier distributions by origin with the `facet_wrap` function.

```{r}
#| code-line-numbers:  "|5"
#| output-location: default
#| fig-width: 10
#| fig-align: center
#| fig-height: 7
ggplot(data = flights,
       aes(y = carrier,fill=origin)) +
  geom_bar()+
  coord_flip()+
  facet_wrap(~ origin, ncol = 1,scales = "free_x")
```

-   What is the reason for the `scales = "free_x"` argument?
-   What is the difference between histograms and barplots?
-   Why can't we use histograms to visualise categorical variables?

## Percentage/proportion barcharts {.smaller}

Instead of plotting the raw frequencies, we can plot the proportions or the percentages per category. 

By default, `ggplot` maps at the beginning, using the layer data provided by the user. Alternatively, we can tell `ggplot` to map after a layer `stat()` has applied a defined statistical transformation using the `after_stat` function.

We will load the `ggstats` library which adds new statistics, geometries and positions to ggplot objects.

```{r}
#| echo: true
#| message: false
#| code-line-numbers: "|4|5|6"
#| output-location: slide
#| fig-align: center
library(ggstats)
ggplot(data = flights,
  aes(x = carrier, 
      y = after_stat(prop),
      fill = origin)) +
  geom_bar(stat = "prop")
  

```

These are the proportions out of the total flights. What if we want the percentages per carrier?

## Percentage/proportion barcharts

```{r}
#| code-line-numbers: "|5|7-8"
#| output-location: default
#| fig-align: center
ggplot(data = flights,
  aes(x = carrier, 
      y = after_stat(prop),
      fill = origin,
      by=factor(carrier))) +
  geom_bar(stat = "prop")+
  geom_text(stat = "prop",
            position = position_fill(vjust=0.5))
```

## Linegraphs {.smaller}

To produce linegraphs using `ggplot` we use the `geom_line` function. Here we are going to use hourly temperature data for Newark International Airport in January only.

```{r}
#| code-line-numbers: "|3"
#| output-location: slide

Newark.Jan <- weather[weather$origin == "EWR" & weather$month == 1, ]
ggplot(data = Newark.Jan, mapping = aes(x = time_hour, y = temp)) +
  geom_line() +
    labs(x = "Time (Hours)", y = "Temperature",
        title = "Hourly Temperature at Newark Airport in January 2013") 
```

-   In the code for the linegraph above, why has `time_hour` been plotted on the x-axis and not `hour`?
-   Why should linegraphs be avoided when there is no sequential ordering of the data?

## Tasks {.smaller}

1.  From the `flights` data set, subset the data for the airline carrier `JetBlue Airways` and produce a scatterplot of their departure delays against arrival delays using `ggplot`. Interpret the scatterplot.

<!--  ```{r task1-solution} -->

<!-- JetBlue <- flights[flights$carrier == "B6", ] -->

<!-- ggplot(data = JetBlue, mapping = aes(x = dep_delay, y = arr_delay)) + -->

<!--   geom_point() + -->

<!--   labs(x = "Departure delay (minutes)", y = "Arrival delay (minutes)", -->

<!--        title = "JetBlue Airways flights leaving NYC in 2013") -->

<!-- ``` -->

2.  Produce a histogram of the hourly temperature from Newark Liberty International (EWR) Airport in 2013 using `ggplot`. How does the temperature distribution compare with that from all airports in New York City in 2013?

<!-- ```{r task2-solution} -->

<!-- EWR.temps <- weather[weather$origin == "EWR", ] -->

<!-- ggplot(data = EWR.temps, mapping = aes(x = temp)) + -->

<!--   geom_histogram(bins = 60, color = "white") + -->

<!--   labs(x = "Temperature", y = "Frequency", -->

<!-- #        title = "Hourly temperature at Newark Liberty International Airport in 2013") -->

<!-- ``` -->

3.  For John F. Kennedy Airport, produce boxplots (using a single `ggplot` command) of the hourly temperature for the months May, June, July, August and September. How does the hourly temperature change during this period?

<!-- ```{r task3-solution} -->

<!-- JFK.temps <- weather[weather$origin == "JFK" & weather$month %in%  5:9, ] -->

<!-- ggplot(data = JFK.temps, mapping = aes(x = factor(month), y = temp)) + -->

<!--    geom_boxplot(fill = "blue") + -->

<!--    labs(x = "Month", y = "Temperature (Hourly)", -->

<!--         title = "Hourly temperature at John F. Kennedy Airport in 2013")  + -->

<!--      scale_x_discrete(labels = c("May", "June", "July", "August", "September")) -->

<!-- ``` -->

4.  Take a look at the `mtcars` data set within the `datasets` library relating to data extracted from the 1974 *Motor Trend* US magazine. Using `ggplot`, produce a faceted barplot of the categorical variables relating to the number of cylinders (`cyl`) and the automobiles transmission (`am`). Interpret the barplot.

<!-- ```{r task4-solution} -->

<!-- mt.cyls <- as.data.frame(table(mtcars$cyl, mtcars$am)) -->

<!-- colnames(mt.cyls) <- c("cylinders", "transmission", "number") -->

<!-- ggplot(data = mt.cyls, mapping = aes(x = cylinders, y = number, fill = transmission)) + -->

<!--  geom_col() + -->

<!--   facet_wrap(~ transmission, ncol = 1) + -->

<!--   labs(x = "Cylinders", y = "Count", -->

<!--         title = "Number of cylinders by transmission from the 1974 Motor Trend US magazine") -->

<!-- ``` -->

5.  Produce a linegraph of the hourly temperature at LAGuardia (LGA) Airport for the month of October 2013. Interpret the linegraph.

<!-- ```{r task5-solution} -->

<!-- LGA.Oct <- weather[weather$origin == "LGA" & weather$month == 10, ] -->

<!-- ggplot(data = LGA.Oct, mapping = aes(x = time_hour, y = temp)) + -->

<!--   geom_line() + -->

<!--   labs(x = "Time (Hours)", y = "Temperature", -->

<!--        title = "Hourly Temperature at LAGuardia Airport in October 2013") -->

<!-- ``` -->
