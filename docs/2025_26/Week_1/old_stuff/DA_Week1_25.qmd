---
title: "Week 1: Visualising and data tidying using R"
format:
  html:    
    code-link: true
    code-fold: true
    code-tools:
      source: false
      toggle: true
    toc: true
    toc-location: left
    toc-title: Contents
    number-sections: true
  pdf:
    latex-auto-install: true
editor: visual
editor_options: 
  chunk_output_type: console
---

# Getting started 1

This week we will review various techniques for data **tidying**, **wrangling** and **visualization** in R. This will also include the correct interpretation and understanding of the different plotting techniques.

::: callout-note
A lot of the content within this course is based on the open-source book [Statistical Inference via Data Science](https://moderndive.com/index.html) and thus is a useful source for additional examples and questions.
:::

First, start by opening **RStudio** by going to `Desktop -> Maths-Stats -> RStudio`. Once RStudio has opened create a new R script by going to `File -> New File -> R Script`. Next go to `File -> Save As...` and save the script into your personal drive, either `M:` or `K:` (do not save it to the `H:` drive). We shall now load into R all of the libraries we will need for this session. This can be done by typing the following into your R script:

```{r}
#| message: false
#| warning: false
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(fivethirtyeight)
```

The libraries can be loaded into R by highlighting them in your script and then clicking on the `Run` button located in the top right of the script window. The first library `ggplot2` allows us to use functions within that package in order to create nice data visualisations. The `tidyverse` library is actually a collection of different R packages for manipulating data. The final two libraries (`nycflights13` and `fivethirtyeight`) contain interesting data sets that we shall examine in this session.

Notice that when loading the `tidyverse` package you get a message that tells you about conflicting functions of certain packages. This means that there is at least one or more functions with the same name loaded from different packages (and thus one the function will mask the other). You can use the function `tidyverse_conflicts()` for getting a list of the conflicted packages:

```{r}
#| warning: false
#| code-fold: true
tidyverse_conflicts()
```

In here, we can see for example that the `filter` function from the `dplyr` package has a conflict with the `filter` function in base R `stats` library. A way of sorting that out is to load the `dplyr` library after base R so that R will only consider the version of the function that was last loaded. We can be more rigorous about this and load the `conflicted` library. This will prohibit us to us any functions that have some conflict with previously defined functions.

```{r}
#| eval: false
library(conflicted)
```

By doing this, we would need to be more specific about the source package from which the desired function should be loaded. There are two ways of doing this:

1.  Using `::` after calling the package name every time we use the function from that package. E.g., `dplyr::filter(â€¦)` will tell R to explicitly use the function `filter` from the `dplyr` library.

2.  Using the `conflicts_prefer("function","package")` function to explicitly declare which version of the function you want to use in the remaining R session (i.e. after `conflicts_prefer()` is called, e.g., `conflict_prefer("filter","dplyr")` .

::: {.callout-tip icon="false"}
## {{< bi question-octagon color=#6dc83c >}} Question

What do you think is the advantage of using the `conflicts_prefer` as opposed to the first approach?
:::
